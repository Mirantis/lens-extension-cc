"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0;

var _base = _interopRequireDefault(require("@emotion/styled/base"));

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var rtv = _interopRequireWildcard(require("rtvjs"));

var _extensions = require("@k8slens/extensions");

var _ExtStateProvider = require("./store/ExtStateProvider");

var _ConfigProvider = require("./store/ConfigProvider");

var _AuthProvider = require("./store/AuthProvider");

var _ClustersProvider = require("./store/ClustersProvider");

var _ClusterActionsProvider = require("./store/ClusterActionsProvider");

var _Login = require("./Login");

var _ClusterList = require("./ClusterList");

var _AddClusters = require("./AddClusters");

var _Loader = require("./Loader");

var _ErrorPanel = require("./ErrorPanel");

var _InfoPanel = require("./InfoPanel");

var _PreferencesPanel = require("./PreferencesPanel");

var strings = _interopRequireWildcard(require("../strings"));

var _styles = require("./styles");

var _eventBus = require("../eventBus");

var _netUtil = require("./netUtil");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// INTERNAL STYLED COMPONENTS
//
const Container = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1nz01xs4"
} : {
  target: "e1nz01xs4",
  label: "Container"
})(function () {
  return {
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    display: 'flex',
    padding: _styles.layout.gap,
    backgroundColor: 'var(--mainBackground)',
    // style all <code> elements herein
    code: {
      // TODO: remove once https://github.com/lensapp/lens/issues/1683 is fixed
      // TRACKING: https://github.com/Mirantis/lens-extension-cc/issues/27
      fontSize: 'calc(var(--font-size) * .9)'
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

const getColumnStyles = function () {
  return {
    // as flex children, grow/shrink evenly
    flex: 1,
    // as flex containers
    ...(0, _styles.mixinFlexColumnGaps)(_styles.layout.grid * 6),
    borderRadius: _styles.layout.grid,
    backgroundColor: 'var(--contentColor)',
    marginRight: _styles.layout.gap,
    padding: _styles.layout.gap,
    overflow: 'auto'
  };
};

const MainColumn = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1nz01xs3"
} : {
  target: "e1nz01xs3",
  label: "MainColumn"
})(function () {
  return { ...getColumnStyles()
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYy9WaWV3LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVFbUIiLCJmaWxlIjoiLi4vLi4vc3JjL2NjL1ZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBwcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgKiBhcyBydHYgZnJvbSAncnR2anMnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGs4c2xlbnMvZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyB1c2VFeHRTdGF0ZSB9IGZyb20gJy4vc3RvcmUvRXh0U3RhdGVQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VDb25maWcgfSBmcm9tICcuL3N0b3JlL0NvbmZpZ1Byb3ZpZGVyJztcbmltcG9ydCB7IHVzZUF1dGggfSBmcm9tICcuL3N0b3JlL0F1dGhQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VDbHVzdGVycyB9IGZyb20gJy4vc3RvcmUvQ2x1c3RlcnNQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VDbHVzdGVyQWN0aW9ucyB9IGZyb20gJy4vc3RvcmUvQ2x1c3RlckFjdGlvbnNQcm92aWRlcic7XG5pbXBvcnQgeyBMb2dpbiB9IGZyb20gJy4vTG9naW4nO1xuaW1wb3J0IHsgQ2x1c3Rlckxpc3QgfSBmcm9tICcuL0NsdXN0ZXJMaXN0JztcbmltcG9ydCB7IEFkZENsdXN0ZXJzIH0gZnJvbSAnLi9BZGRDbHVzdGVycyc7XG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICcuL0xvYWRlcic7XG5pbXBvcnQgeyBFcnJvclBhbmVsIH0gZnJvbSAnLi9FcnJvclBhbmVsJztcbmltcG9ydCB7IEluZm9QYW5lbCB9IGZyb20gJy4vSW5mb1BhbmVsJztcbmltcG9ydCB7IFByZWZlcmVuY2VzUGFuZWwgfSBmcm9tICcuL1ByZWZlcmVuY2VzUGFuZWwnO1xuaW1wb3J0ICogYXMgc3RyaW5ncyBmcm9tICcuLi9zdHJpbmdzJztcbmltcG9ydCB7IGxheW91dCwgbWl4aW5GbGV4Q29sdW1uR2FwcyB9IGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCB7XG4gIEVYVF9FVkVOVF9BQ1RJVkFURV9DTFVTVEVSLFxuICBFWFRfRVZFTlRfQUREX0NMVVNURVJTLFxuICBFWFRfRVZFTlRfS1VCRUNPTkZJRyxcbiAgZXh0RXZlbnRBY3RpdmF0ZUNsdXN0ZXJUcyxcbiAgZXh0RXZlbnRBZGRDbHVzdGVyc1RzLFxuICBleHRFdmVudEt1YmVjb25maWdUcyxcbiAgYWRkRXh0RXZlbnRIYW5kbGVyLFxuICByZW1vdmVFeHRFdmVudEhhbmRsZXIsXG59IGZyb20gJy4uL2V2ZW50QnVzJztcbmltcG9ydCB7IG5vcm1hbGl6ZVVybCB9IGZyb20gJy4vbmV0VXRpbCc7XG5cbi8vXG4vLyBJTlRFUk5BTCBTVFlMRUQgQ09NUE9ORU5UU1xuLy9cblxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nOiBsYXlvdXQuZ2FwLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLW1haW5CYWNrZ3JvdW5kKScsXG5cbiAgICAvLyBzdHlsZSBhbGwgPGNvZGU+IGVsZW1lbnRzIGhlcmVpblxuICAgIGNvZGU6IHtcbiAgICAgIC8vIFRPRE86IHJlbW92ZSBvbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9sZW5zYXBwL2xlbnMvaXNzdWVzLzE2ODMgaXMgZml4ZWRcbiAgICAgIC8vIFRSQUNLSU5HOiBodHRwczovL2dpdGh1Yi5jb20vTWlyYW50aXMvbGVucy1leHRlbnNpb24tY2MvaXNzdWVzLzI3XG4gICAgICBmb250U2l6ZTogJ2NhbGModmFyKC0tZm9udC1zaXplKSAqIC45KScsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBnZXRDb2x1bW5TdHlsZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgLy8gYXMgZmxleCBjaGlsZHJlbiwgZ3Jvdy9zaHJpbmsgZXZlbmx5XG4gICAgZmxleDogMSxcblxuICAgIC8vIGFzIGZsZXggY29udGFpbmVyc1xuICAgIC4uLm1peGluRmxleENvbHVtbkdhcHMobGF5b3V0LmdyaWQgKiA2KSxcblxuICAgIGJvcmRlclJhZGl1czogbGF5b3V0LmdyaWQsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tY29udGVudENvbG9yKScsXG4gICAgbWFyZ2luUmlnaHQ6IGxheW91dC5nYXAsXG4gICAgcGFkZGluZzogbGF5b3V0LmdhcCxcbiAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICB9O1xufTtcblxuY29uc3QgTWFpbkNvbHVtbiA9IHN0eWxlZC5kaXYoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIC4uLmdldENvbHVtblN0eWxlcygpLFxuICB9O1xufSk7XG5cbmNvbnN0IEhlbHBDb2x1bW4gPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5nZXRDb2x1bW5TdHlsZXMoKSxcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLCAvLyBwdXNoIFByZWZlcmVuY2VzUGFuZWwgdG8gdGhlIGJvdHRvbVxuICAgIG1hcmdpblJpZ2h0OiAwLFxuICB9O1xufSk7XG5cbmNvbnN0IEhlbHBDb250ZW50ID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgJ2gyLCBoMywgPiBwJzoge1xuICAgICAgbWFyZ2luQm90dG9tOiBsYXlvdXQuZ2FwLFxuICAgIH0sXG5cbiAgICAncDpsYXN0LWNoaWxkJzoge1xuICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgIH0sXG4gIH07XG59KTtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblxuICAgIGgyOiB7XG4gICAgICBtYXJnaW5SaWdodDogbGF5b3V0LmdhcCxcbiAgICB9LFxuICB9O1xufSk7XG5cbi8vXG4vLyBNQUlOIENPTVBPTkVOVFxuLy9cblxuZXhwb3J0IGNvbnN0IFZpZXcgPSBmdW5jdGlvbiAoeyBleHRlbnNpb24gfSkge1xuICAvL1xuICAvLyBTVEFURVxuICAvL1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZToge1xuICAgICAgYXV0aEFjY2VzcyxcbiAgICAgIHByZWZzOiB7IGNsb3VkVXJsLCBhZGRUb05ldywgb2ZmbGluZSwgc2F2ZVBhdGggfSxcbiAgICB9LFxuICAgIGFjdGlvbnM6IGV4dEFjdGlvbnMsXG4gIH0gPSB1c2VFeHRTdGF0ZSgpO1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZToge1xuICAgICAgbG9hZGluZzogY29uZmlnTG9hZGluZyxcbiAgICAgIGxvYWRlZDogY29uZmlnTG9hZGVkLFxuICAgICAgZXJyb3I6IGNvbmZpZ0Vycm9yLFxuICAgICAgY29uZmlnLFxuICAgIH0sXG4gICAgYWN0aW9uczogY29uZmlnQWN0aW9ucyxcbiAgfSA9IHVzZUNvbmZpZygpO1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZTogeyBsb2FkaW5nOiBhdXRoTG9hZGluZywgbG9hZGVkOiBhdXRoTG9hZGVkLCBlcnJvcjogYXV0aEVycm9yIH0sXG4gICAgYWN0aW9uczogYXV0aEFjdGlvbnMsXG4gIH0gPSB1c2VBdXRoKCk7XG5cbiAgY29uc3Qge1xuICAgIHN0YXRlOiB7XG4gICAgICBsb2FkaW5nOiBjbHVzdGVyc0xvYWRpbmcsXG4gICAgICBsb2FkZWQ6IGNsdXN0ZXJzTG9hZGVkLFxuICAgICAgZXJyb3I6IGNsdXN0ZXJzRXJyb3IsXG4gICAgICBkYXRhOiB7IGNsdXN0ZXJzIH0sXG4gICAgfSxcbiAgICBhY3Rpb25zOiBjbHVzdGVyc0FjdGlvbnMsXG4gIH0gPSB1c2VDbHVzdGVycygpO1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZToge1xuICAgICAgbG9hZGluZzogYWRkQ2x1c3RlcnNMb2FkaW5nLFxuICAgICAgZXJyb3I6IGFkZENsdXN0ZXJzRXJyb3IsXG4gICAgICBrdWJlQ2x1c3RlckFkZGVkLFxuICAgIH0sXG4gICAgYWN0aW9uczogY2x1c3RlckFjdGlvbnMsXG4gIH0gPSB1c2VDbHVzdGVyQWN0aW9ucygpO1xuXG4gIC8vIEB0eXBlIHtudWxsfEFycmF5PENsdXN0ZXI+fSBudWxsIHVudGlsIGNsdXN0ZXJzIGFyZSBsb2FkZWQsIHRoZW4gYW4gYXJyYXlcbiAgLy8gIHRoYXQgcmVwcmVzZW50cyB0aGUgY3VycmVudCBzZWxlY3Rpb24sIGNvdWxkIGJlIGVtcHR5XG4gIGNvbnN0IFtzZWxlY3RlZENsdXN0ZXJzLCBzZXRTZWxlY3RlZENsdXN0ZXJzXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIC8vIEB0eXBlIHtzdHJpbmd8bnVsbH0gaWYgc2V0LCB0aGUgdHlwZSBvZiBleHRlbnNpb24gZXZlbnQgKGZyb20gdGhlIGBldmVudEJ1c2ApIHRoYXRcbiAgLy8gIGlzIGN1cnJlbnRseSBiZWluZyBoYW5kbGVkOyBvdGhlcndpc2UsIHRoZSBleHRlbnNpb24gaXMgaW4gaXRzICdub3JtYWwnIHN0YXRlXG4gIGNvbnN0IFthY3RpdmVFdmVudFR5cGUsIHNldEFjdGl2ZUV2ZW50VHlwZV0gPSB1c2VTdGF0ZShudWxsKTtcblxuICAvLyBuYW1lIG9mIHRoZSBjbHVzdGVyIGJlaW5nIGFkZGVkL3NraXBwZWQvYWN0aXZhdGVkIHZpYSBhbiBldmVudDsgbnVsbCBpZiBub3RcbiAgLy8gIHByb2Nlc3NpbmcgYW4gRVhUX0VWRU5UX0tVQkVDT05GSUcgb3IgRVhUX0VWRU5UX0FDVElWQVRFX0NMVVNURVIgZXZlbnRcbiAgY29uc3QgW2V2ZW50Q2x1c3Rlck5hbWUsIHNldEV2ZW50Q2x1c3Rlck5hbWVdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgLy8gQHR5cGUge3N0cmluZ30gbWVzc2FnZSB0byBzaG93IGluIExvYWRlcjsgbnVsbCBpZiBub25lXG4gIGNvbnN0IFtsb2FkZXJNZXNzYWdlLCBzZXRMb2FkZXJNZXNzYWdlXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIGNvbnN0IGxvYWRpbmcgPVxuICAgIGNvbmZpZ0xvYWRpbmcgfHxcbiAgICAoY29uZmlnTG9hZGVkICYmXG4gICAgICAhY29uZmlnRXJyb3IgJiZcbiAgICAgICFhdXRoTG9hZGVkICYmXG4gICAgICBhdXRoQWNjZXNzLmhhc0NyZWRlbnRpYWxzKCkpIHx8XG4gICAgYXV0aExvYWRpbmcgfHxcbiAgICAoYXV0aExvYWRlZCAmJiAhYXV0aEVycm9yICYmICFjbHVzdGVyc0xvYWRlZCkgfHxcbiAgICBjbHVzdGVyc0xvYWRpbmcgfHxcbiAgICBhZGRDbHVzdGVyc0xvYWRpbmc7XG5cbiAgLy8gQHR5cGUge3N0cmluZ3xudWxsfSBpbiBvcmRlciBvZiBleGVjdXRpb24vcHJlY2VkZW5jZVxuICBjb25zdCBlcnJNZXNzYWdlID1cbiAgICBjb25maWdFcnJvciB8fCBhdXRoRXJyb3IgfHwgY2x1c3RlcnNFcnJvciB8fCBhZGRDbHVzdGVyc0Vycm9yIHx8IG51bGw7XG5cbiAgLy9cbiAgLy8gRVZFTlRTXG4gIC8vXG5cbiAgY29uc3QgaGFuZGxlTG9naW4gPSB1c2VDYWxsYmFjayhcbiAgICBmdW5jdGlvbiAoaW5mbykge1xuICAgICAgYXV0aEFjY2Vzcy51c2VybmFtZSA9IGluZm8udXNlcm5hbWU7XG4gICAgICBhdXRoQWNjZXNzLnBhc3N3b3JkID0gaW5mby5wYXNzd29yZDtcblxuICAgICAgY29uc3QgdXJsID0gbm9ybWFsaXplVXJsKGluZm8uY2xvdWRVcmwpO1xuXG4gICAgICBhdXRoQWNjZXNzLmNsZWFyVG9rZW5zKCk7XG4gICAgICBleHRBY3Rpb25zLnNldENsb3VkVXJsKHVybCk7XG4gICAgICBleHRBY3Rpb25zLnNldEF1dGhBY2Nlc3MoYXV0aEFjY2Vzcyk7XG4gICAgICBhdXRoQWN0aW9ucy5yZXNldCgpO1xuICAgICAgY2x1c3RlcnNBY3Rpb25zLnJlc2V0KCk7XG5cbiAgICAgIGNvbmZpZ0FjdGlvbnMubG9hZCh1cmwpOyAvLyBpbXBsaWNpdCByZXNldCBvZiBjdXJyZW50IGNvbmZpZ1xuICAgIH0sXG4gICAgW2F1dGhBY2Nlc3MsIGV4dEFjdGlvbnMsIGF1dGhBY3Rpb25zLCBjbHVzdGVyc0FjdGlvbnMsIGNvbmZpZ0FjdGlvbnNdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ2x1c3RlclNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKFxuICAgIGZ1bmN0aW9uICh7IGNsdXN0ZXIsIHNlbGVjdGVkIH0pIHtcbiAgICAgIGNvbnN0IGlkeCA9IHNlbGVjdGVkQ2x1c3RlcnMuaW5kZXhPZihjbHVzdGVyKTtcbiAgICAgIGlmIChzZWxlY3RlZCAmJiBpZHggPCAwKSB7XG4gICAgICAgIHNldFNlbGVjdGVkQ2x1c3RlcnMoc2VsZWN0ZWRDbHVzdGVycy5jb25jYXQoY2x1c3RlcikpO1xuICAgICAgfSBlbHNlIGlmICghc2VsZWN0ZWQgJiYgaWR4ID49IDApIHtcbiAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uID0gc2VsZWN0ZWRDbHVzdGVycy5jb25jYXQoKTtcbiAgICAgICAgbmV3U2VsZWN0aW9uLnNwbGljZShpZHgsIDEpO1xuICAgICAgICBzZXRTZWxlY3RlZENsdXN0ZXJzKG5ld1NlbGVjdGlvbik7XG4gICAgICB9XG4gICAgfSxcbiAgICBbc2VsZWN0ZWRDbHVzdGVyc11cbiAgKTtcblxuICBjb25zdCBoYW5kbGVDbHVzdGVyU2VsZWN0QWxsID0gdXNlQ2FsbGJhY2soXG4gICAgZnVuY3Rpb24gKHsgc2VsZWN0ZWQgfSkge1xuICAgICAgLy8gc2hhbGxvdy1jbG9uZSBieSBmaWx0ZXJpbmcgZm9yIHJlYWR5IGNsdXN0ZXJzXG4gICAgICBzZXRTZWxlY3RlZENsdXN0ZXJzKHNlbGVjdGVkID8gY2x1c3RlcnMuZmlsdGVyKChjbCkgPT4gY2wucmVhZHkpIDogW10pO1xuICAgIH0sXG4gICAgW2NsdXN0ZXJzXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUNsdXN0ZXJzQWRkID0gdXNlQ2FsbGJhY2soXG4gICAgZnVuY3Rpb24gKHsgcGFzc3dvcmQgfSkge1xuICAgICAgaWYgKCFhZGRDbHVzdGVyc0xvYWRpbmcpIHtcbiAgICAgICAgY2x1c3RlckFjdGlvbnMuYWRkQ2x1c3RlcnMoe1xuICAgICAgICAgIGNsdXN0ZXJzOiBzZWxlY3RlZENsdXN0ZXJzLFxuICAgICAgICAgIHNhdmVQYXRoLFxuICAgICAgICAgIGNsb3VkVXJsLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICB1c2VybmFtZTogYXV0aEFjY2Vzcy51c2VybmFtZSxcbiAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQgfHwgYXV0aEFjY2Vzcy5wYXNzd29yZCxcbiAgICAgICAgICBvZmZsaW5lLFxuICAgICAgICAgIGFkZFRvTmV3LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIGNsb3VkVXJsLFxuICAgICAgYXV0aEFjY2VzcyxcbiAgICAgIHNhdmVQYXRoLFxuICAgICAgYWRkVG9OZXcsXG4gICAgICBvZmZsaW5lLFxuICAgICAgY29uZmlnLFxuICAgICAgc2VsZWN0ZWRDbHVzdGVycyxcbiAgICAgIGFkZENsdXN0ZXJzTG9hZGluZyxcbiAgICAgIGNsdXN0ZXJBY3Rpb25zLFxuICAgIF1cbiAgKTtcblxuICBjb25zdCBoYW5kbGVDbG9zZUNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gcmVzZXQgVmlldyBiYWNrIHRvIGxvZ2luIHdpdGggY3VycmVudCBhdXRoIGluIGNhc2Ugc3RpbGwgdmFsaWRcbiAgICAgIHNldEFjdGl2ZUV2ZW50VHlwZShudWxsKTtcbiAgICAgIHNldExvYWRlck1lc3NhZ2UobnVsbCk7XG4gICAgICBzZXRFdmVudENsdXN0ZXJOYW1lKG51bGwpO1xuICAgICAgY29uZmlnQWN0aW9ucy5yZXNldCgpO1xuICAgICAgYXV0aEFjdGlvbnMucmVzZXQoKTtcbiAgICAgIGNsdXN0ZXJzQWN0aW9ucy5yZXNldCgpO1xuICAgICAgc2V0U2VsZWN0ZWRDbHVzdGVycyhbXSk7XG4gICAgICBjbHVzdGVyQWN0aW9ucy5yZXNldCgpO1xuICAgIH0sXG4gICAgW2NvbmZpZ0FjdGlvbnMsIGF1dGhBY3Rpb25zLCBjbHVzdGVyc0FjdGlvbnMsIGNsdXN0ZXJBY3Rpb25zXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUFjdGl2YXRlQ2x1c3RlckV2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBydHYudmVyaWZ5KHsgZXZlbnQgfSwgeyBldmVudDogZXh0RXZlbnRBY3RpdmF0ZUNsdXN0ZXJUcyB9KTtcblxuICAgICAgY29uc3QgeyBkYXRhIH0gPSBldmVudDtcblxuICAgICAgaWYgKCFhZGRDbHVzdGVyc0xvYWRpbmcpIHtcbiAgICAgICAgc2V0QWN0aXZlRXZlbnRUeXBlKEVYVF9FVkVOVF9BQ1RJVkFURV9DTFVTVEVSKTtcbiAgICAgICAgc2V0TG9hZGVyTWVzc2FnZShcbiAgICAgICAgICBzdHJpbmdzLnZpZXcubWFpbi5sb2FkZXJzLmFjdGl2YXRlQ2x1c3RlcihcbiAgICAgICAgICAgIGAke2RhdGEubmFtZXNwYWNlfS8ke2RhdGEuY2x1c3Rlck5hbWV9YFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgc2V0RXZlbnRDbHVzdGVyTmFtZShgJHtkYXRhLm5hbWVzcGFjZX0vJHtkYXRhLmNsdXN0ZXJOYW1lfWApO1xuICAgICAgICBjbHVzdGVyQWN0aW9ucy5hY3RpdmF0ZUNsdXN0ZXIoZGF0YSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbYWRkQ2x1c3RlcnNMb2FkaW5nLCBjbHVzdGVyQWN0aW9uc11cbiAgKTtcblxuICBjb25zdCBoYW5kbGVBZGRDbHVzdGVyc0V2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBydHYudmVyaWZ5KHsgZXZlbnQgfSwgeyBldmVudDogZXh0RXZlbnRBZGRDbHVzdGVyc1RzIH0pO1xuXG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGV2ZW50O1xuXG4gICAgICBhdXRoQWNjZXNzLnVzZXJuYW1lID0gZGF0YS51c2VybmFtZTtcbiAgICAgIGF1dGhBY2Nlc3MucGFzc3dvcmQgPSBudWxsO1xuICAgICAgYXV0aEFjY2Vzcy51cGRhdGVUb2tlbnMoZGF0YS50b2tlbnMpO1xuXG4gICAgICBjb25zdCB1cmwgPSBub3JtYWxpemVVcmwoZGF0YS5jbG91ZFVybCk7XG4gICAgICBleHRBY3Rpb25zLnNldENsb3VkVXJsKHVybCk7XG4gICAgICBleHRBY3Rpb25zLnNldEF1dGhBY2Nlc3MoYXV0aEFjY2Vzcyk7XG5cbiAgICAgIGF1dGhBY3Rpb25zLnJlc2V0KCk7XG4gICAgICBjbHVzdGVyc0FjdGlvbnMucmVzZXQoKTtcblxuICAgICAgc2V0QWN0aXZlRXZlbnRUeXBlKEVYVF9FVkVOVF9BRERfQ0xVU1RFUlMpO1xuICAgICAgc2V0TG9hZGVyTWVzc2FnZShzdHJpbmdzLnZpZXcubWFpbi5sb2FkZXJzLmFkZENsdXN0ZXJzSHRtbCh1cmwpKTtcbiAgICAgIGNvbmZpZ0FjdGlvbnMubG9hZCh1cmwpOyAvLyBpbXBsaWNpdCByZXNldCBvZiBjdXJyZW50IGNvbmZpZ1xuICAgIH0sXG4gICAgW2F1dGhBY2Nlc3MsIGF1dGhBY3Rpb25zLCBleHRBY3Rpb25zLCBjbHVzdGVyc0FjdGlvbnMsIGNvbmZpZ0FjdGlvbnNdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlS3ViZWNvbmZpZ0V2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBydHYudmVyaWZ5KHsgZXZlbnQgfSwgeyBldmVudDogZXh0RXZlbnRLdWJlY29uZmlnVHMgfSk7XG5cbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gZXZlbnQ7XG5cbiAgICAgIGlmICghYWRkQ2x1c3RlcnNMb2FkaW5nKSB7XG4gICAgICAgIHNldEFjdGl2ZUV2ZW50VHlwZShFWFRfRVZFTlRfS1VCRUNPTkZJRyk7XG4gICAgICAgIHNldExvYWRlck1lc3NhZ2UoXG4gICAgICAgICAgc3RyaW5ncy52aWV3Lm1haW4ubG9hZGVycy5hZGRLdWJlQ2x1c3RlcihcbiAgICAgICAgICAgIGAke2RhdGEubmFtZXNwYWNlfS8ke2RhdGEuY2x1c3Rlck5hbWV9YFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgc2V0RXZlbnRDbHVzdGVyTmFtZShgJHtkYXRhLm5hbWVzcGFjZX0vJHtkYXRhLmNsdXN0ZXJOYW1lfWApO1xuICAgICAgICBjbHVzdGVyQWN0aW9ucy5hZGRLdWJlQ2x1c3Rlcih7XG4gICAgICAgICAgc2F2ZVBhdGgsXG4gICAgICAgICAgYWRkVG9OZXcsXG4gICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbc2F2ZVBhdGgsIGFkZFRvTmV3LCBhZGRDbHVzdGVyc0xvYWRpbmcsIGNsdXN0ZXJBY3Rpb25zXVxuICApO1xuXG4gIC8vXG4gIC8vIEVGRkVDVFNcbiAgLy9cblxuICB1c2VFZmZlY3QoXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgYWRkRXh0RXZlbnRIYW5kbGVyKFxuICAgICAgICBFWFRfRVZFTlRfQUNUSVZBVEVfQ0xVU1RFUixcbiAgICAgICAgaGFuZGxlQWN0aXZhdGVDbHVzdGVyRXZlbnRcbiAgICAgICk7XG4gICAgICBhZGRFeHRFdmVudEhhbmRsZXIoRVhUX0VWRU5UX0FERF9DTFVTVEVSUywgaGFuZGxlQWRkQ2x1c3RlcnNFdmVudCk7XG4gICAgICBhZGRFeHRFdmVudEhhbmRsZXIoRVhUX0VWRU5UX0tVQkVDT05GSUcsIGhhbmRsZUt1YmVjb25maWdFdmVudCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUV4dEV2ZW50SGFuZGxlcihcbiAgICAgICAgICBFWFRfRVZFTlRfQUNUSVZBVEVfQ0xVU1RFUixcbiAgICAgICAgICBoYW5kbGVBY3RpdmF0ZUNsdXN0ZXJFdmVudFxuICAgICAgICApO1xuICAgICAgICByZW1vdmVFeHRFdmVudEhhbmRsZXIoRVhUX0VWRU5UX0FERF9DTFVTVEVSUywgaGFuZGxlQWRkQ2x1c3RlcnNFdmVudCk7XG4gICAgICAgIHJlbW92ZUV4dEV2ZW50SGFuZGxlcihFWFRfRVZFTlRfS1VCRUNPTkZJRywgaGFuZGxlS3ViZWNvbmZpZ0V2ZW50KTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBbaGFuZGxlQWN0aXZhdGVDbHVzdGVyRXZlbnQsIGhhbmRsZUFkZENsdXN0ZXJzRXZlbnQsIGhhbmRsZUt1YmVjb25maWdFdmVudF1cbiAgKTtcblxuICAvLyAxLiBsb2FkIHRoZSBjb25maWcgb2JqZWN0XG4gIHVzZUVmZmVjdChcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNsb3VkVXJsICYmXG4gICAgICAgIGF1dGhBY2Nlc3MuaGFzQ3JlZGVudGlhbHMoKSAmJlxuICAgICAgICAhY29uZmlnTG9hZGluZyAmJlxuICAgICAgICAhY29uZmlnTG9hZGVkXG4gICAgICApIHtcbiAgICAgICAgY29uZmlnQWN0aW9ucy5sb2FkKGNsb3VkVXJsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtjbG91ZFVybCwgYXV0aEFjY2VzcywgY29uZmlnTG9hZGluZywgY29uZmlnTG9hZGVkLCBjb25maWdBY3Rpb25zXVxuICApO1xuXG4gIC8vIDIuIGF1dGhlbnRpY2F0ZVxuICB1c2VFZmZlY3QoXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKFxuICAgICAgICAhY29uZmlnTG9hZGluZyAmJlxuICAgICAgICBjb25maWdMb2FkZWQgJiZcbiAgICAgICAgIWNvbmZpZ0Vycm9yICYmXG4gICAgICAgICFhdXRoTG9hZGluZyAmJlxuICAgICAgICAhYXV0aExvYWRlZFxuICAgICAgKSB7XG4gICAgICAgIGlmIChhdXRoQWNjZXNzLmlzVmFsaWQoIWFjdGl2ZUV2ZW50VHlwZSkpIHtcbiAgICAgICAgICAvLyBza2lwIGF1dGhlbnRpY2F0aW9uLCBnbyBzdHJhaWdodCBmb3IgdGhlIGNsdXN0ZXJzXG4gICAgICAgICAgYXV0aEFjdGlvbnMuc2V0QXV0aGVudGljYXRlZCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGF1dGhBY2Nlc3MuaGFzQ3JlZGVudGlhbHMoKSkge1xuICAgICAgICAgIGF1dGhBY3Rpb25zLmF1dGhlbnRpY2F0ZSh7XG4gICAgICAgICAgICBhdXRoQWNjZXNzLFxuICAgICAgICAgICAgY2xvdWRVcmwsXG4gICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIGNvbmZpZ0xvYWRpbmcsXG4gICAgICBjb25maWdMb2FkZWQsXG4gICAgICBjb25maWdFcnJvcixcbiAgICAgIGF1dGhMb2FkaW5nLFxuICAgICAgYXV0aExvYWRlZCxcbiAgICAgIGF1dGhBY3Rpb25zLFxuICAgICAgYXV0aEFjY2VzcyxcbiAgICAgIGNsb3VkVXJsLFxuICAgICAgY29uZmlnLFxuICAgICAgYWN0aXZlRXZlbnRUeXBlLFxuICAgIF1cbiAgKTtcblxuICAvLyAzLiBnZXQgY2x1c3RlcnNcbiAgdXNlRWZmZWN0KFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWNsdXN0ZXJzTG9hZGluZyAmJlxuICAgICAgICAhY2x1c3RlcnNMb2FkZWQgJiZcbiAgICAgICAgY2xvdWRVcmwgJiZcbiAgICAgICAgY29uZmlnICYmXG4gICAgICAgIGF1dGhMb2FkZWQgJiZcbiAgICAgICAgYXV0aEFjY2Vzcy5pc1ZhbGlkKCFhY3RpdmVFdmVudFR5cGUpXG4gICAgICApIHtcbiAgICAgICAgY2x1c3RlcnNBY3Rpb25zLmxvYWQoY2xvdWRVcmwsIGNvbmZpZywgYXV0aEFjY2Vzcyk7XG4gICAgICB9IGVsc2UgaWYgKGF1dGhBY2Nlc3MuY2hhbmdlZCkge1xuICAgICAgICBleHRBY3Rpb25zLnNldEF1dGhBY2Nlc3MoYXV0aEFjY2Vzcyk7IC8vIGNhcHR1cmUgYW55IGNoYW5nZXMgYWZ0ZXIgbG9hZGluZyBjbHVzdGVyc1xuICAgICAgfVxuICAgIH0sXG4gICAgW1xuICAgICAgY2xvdWRVcmwsXG4gICAgICBhdXRoQWNjZXNzLFxuICAgICAgZXh0QWN0aW9ucyxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGF1dGhMb2FkZWQsXG4gICAgICBjbHVzdGVyc0xvYWRpbmcsXG4gICAgICBjbHVzdGVyc0xvYWRlZCxcbiAgICAgIGNsdXN0ZXJzQWN0aW9ucyxcbiAgICAgIGFjdGl2ZUV2ZW50VHlwZSxcbiAgICBdXG4gICk7XG5cbiAgLy8gNC4gc2V0IGluaXRpYWwgc2VsZWN0aW9uIGFmdGVyIGNsdXN0ZXIgbG9hZFxuICB1c2VFZmZlY3QoXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNsdXN0ZXJzTG9hZGluZyAmJiBzZWxlY3RlZENsdXN0ZXJzKSB7XG4gICAgICAgIHNldFNlbGVjdGVkQ2x1c3RlcnMobnVsbCk7IC8vIGNsZWFyIHNlbGVjdGlvbiBiZWNhdXNlIHdlIChyZS0pbG9hZGluZyBjbHVzdGVyc1xuICAgICAgfSBlbHNlIGlmIChjbHVzdGVyc0xvYWRlZCAmJiAhc2VsZWN0ZWRDbHVzdGVycykge1xuICAgICAgICAvLyBzZXQgaW5pdGlhbCBzZWxlY3Rpb24sIHNraXBwaW5nIG1hbmFnZW1lbnQgY2x1c3RlcnMgc2luY2UgdGhleSB0eXBpY2FsbHlcbiAgICAgICAgLy8gIGFyZSBvZiBsZXNzIGltcG9ydGFuY2UsIGFzIHdlbGwgYXMgY2x1c3RlcnMgdGhhdCBhcmVuJ3QgcmVhZHkgeWV0XG4gICAgICAgIC8vIGFsc28sIHNoYWxsb3cgY2xvbmUgdGhlIGFycmF5IHRvIGRpc2Fzc29jaWF0ZSBmcm9tIHNvdXJjZVxuICAgICAgICBzZXRTZWxlY3RlZENsdXN0ZXJzKFxuICAgICAgICAgIGNsdXN0ZXJzLmZpbHRlcigoY2wpID0+IGNsLnJlYWR5ICYmICFjbC5pc01hbmFnZW1lbnRDbHVzdGVyKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChjbHVzdGVyc0xvYWRlZCAmJiBhY3RpdmVFdmVudFR5cGUgPT09IEVYVF9FVkVOVF9BRERfQ0xVU1RFUlMpIHtcbiAgICAgICAgc2V0TG9hZGVyTWVzc2FnZShudWxsKTsgLy8gZG9uJ3Qgc2hvdyB0aGUgbG9hZGVyIGFnYWluIHdoZW4gdXNlciBhY3R1YWxseSBhZGRzIHRoZSBjbHVzdGVyc1xuICAgICAgfVxuICAgIH0sXG4gICAgW1xuICAgICAgY2x1c3RlcnNMb2FkaW5nLFxuICAgICAgY2x1c3RlcnNMb2FkZWQsXG4gICAgICBjbHVzdGVycyxcbiAgICAgIHNlbGVjdGVkQ2x1c3RlcnMsXG4gICAgICBhY3RpdmVFdmVudFR5cGUsXG4gICAgXVxuICApO1xuXG4gIC8vXG4gIC8vIFJFTkRFUlxuICAvL1xuXG4gIGNvbnN0IHRpdGxlID1cbiAgICBhY3RpdmVFdmVudFR5cGUgPT09IEVYVF9FVkVOVF9LVUJFQ09ORklHXG4gICAgICA/IHN0cmluZ3Mudmlldy5tYWluLnRpdGxlcy5rdWJlQ29uZmlnKClcbiAgICAgIDogYWN0aXZlRXZlbnRUeXBlID09PSBFWFRfRVZFTlRfQUNUSVZBVEVfQ0xVU1RFUlxuICAgICAgPyBzdHJpbmdzLnZpZXcubWFpbi50aXRsZXMuYWN0aXZhdGVDbHVzdGVyKClcbiAgICAgIDogc3RyaW5ncy52aWV3Lm1haW4udGl0bGVzLmdlbmVyaWMoKTtcblxuICByZXR1cm4gKFxuICAgIDxDb250YWluZXIgY2xhc3NOYW1lPVwibGVjYy1WaWV3XCI+XG4gICAgICA8TWFpbkNvbHVtbj5cbiAgICAgICAgey8qIGluY2x1ZGUgWCAoY2xvc2UpIG9ubHkgaWYgd2UncmUgaGFuZGxpbmcgYW4gZXh0ZW5zaW9uIGV2ZW50ICovfVxuICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgPGgyPnt0aXRsZX08L2gyPlxuICAgICAgICAgIHthY3RpdmVFdmVudFR5cGUgJiYgKFxuICAgICAgICAgICAgPENvbXBvbmVudC5JY29uXG4gICAgICAgICAgICAgIG1hdGVyaWFsPVwiY2xvc2VcIlxuICAgICAgICAgICAgICBpbnRlcmFjdGl2ZVxuICAgICAgICAgICAgICBiaWdcbiAgICAgICAgICAgICAgdGl0bGU9e3N0cmluZ3Mudmlldy5tYWluLmNsb3NlKCl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsb3NlQ2xpY2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvVGl0bGU+XG5cbiAgICAgICAgey8qIG9ubHkgc2hvdyBMb2dpbiBpZiB3ZSBhcmUgTk9UIGhhbmRsaW5nIGFuIGV4dGVuc2lvbiBldmVudCAqL31cbiAgICAgICAgeyFhY3RpdmVFdmVudFR5cGUgJiYgKFxuICAgICAgICAgIDxMb2dpblxuICAgICAgICAgICAgbG9hZGluZz17bG9hZGluZyAmJiAhYWRkQ2x1c3RlcnNMb2FkaW5nfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2xvYWRpbmd9XG4gICAgICAgICAgICBjbG91ZFVybD17Y2xvdWRVcmwgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgdXNlcm5hbWU9e2F1dGhBY2Nlc3MgPyBhdXRoQWNjZXNzLnVzZXJuYW1lIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgcGFzc3dvcmQ9e2F1dGhBY2Nlc3MgPyBhdXRoQWNjZXNzLnBhc3N3b3JkIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgb25Mb2dpbj17aGFuZGxlTG9naW59XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cblxuICAgICAgICB7Lyogc2hvdyBsb2FkZXIgb25seSBpZiB3ZSBoYXZlIGEgbWVzc2FnZSB0byBzaG93LCB3aGljaCBpcyB0eXBpY2FsbHkgb25seSB3aGVuIHdlJ3JlIGhhbmRsaW5nIGFuIEVYVF9FVkVOVF8qIGV2ZW50ICovfVxuICAgICAgICB7bG9hZGluZyAmJiBsb2FkZXJNZXNzYWdlICYmIDxMb2FkZXIgbWVzc2FnZT17bG9hZGVyTWVzc2FnZX0gLz59XG5cbiAgICAgICAgey8qIHNob3cgZXJyb3IgaW4gVUkgb24gdG9wIG9mIG5vdGlmaWNhdGlvbiAoc2luY2UgdGhleSBkaXNhcHBlYXIpIHdoZW4gaGFuZGxpbmcgYW4gZXZlbnQgKi99XG4gICAgICAgIHthY3RpdmVFdmVudFR5cGUgJiYgISFlcnJNZXNzYWdlICYmIChcbiAgICAgICAgICA8RXJyb3JQYW5lbD57ZXJyTWVzc2FnZX08L0Vycm9yUGFuZWw+XG4gICAgICAgICl9XG5cbiAgICAgICAgey8qXG4gICAgICAgICAgd2hlbiBoYW5kbGluZyB0aGUgRVhUX0VWRU5UX0tVQkVDT05GSUcgZXZlbnQsIHNob3cgdGhlIHJlc3VsdCBpbiB0aGUgVUkgZXZlbiB0aG91Z2hcbiAgICAgICAgICAgdXNlciB3b24ndCBzZWUgaXQgc2luY2Ugd2UgYWN0aXZhdGUgdGhlIGNsdXN0ZXI7IGp1c3QgaW4gY2FzZSwgYXMgYSBuZXV0cmFsIHN0YXRlXG4gICAgICAgICovfVxuICAgICAgICB7YWN0aXZlRXZlbnRUeXBlID09PSBFWFRfRVZFTlRfS1VCRUNPTkZJRyAmJlxuICAgICAgICAgICFlcnJNZXNzYWdlICYmXG4gICAgICAgICAga3ViZUNsdXN0ZXJBZGRlZCAmJiAoXG4gICAgICAgICAgICA8SW5mb1BhbmVsPlxuICAgICAgICAgICAgICB7c3RyaW5ncy52aWV3Lm1haW4ua3ViZUNvbmZpZ0V2ZW50LmNsdXN0ZXJBZGRlZChldmVudENsdXN0ZXJOYW1lKX1cbiAgICAgICAgICAgIDwvSW5mb1BhbmVsPlxuICAgICAgICAgICl9XG4gICAgICAgIHthY3RpdmVFdmVudFR5cGUgPT09IEVYVF9FVkVOVF9LVUJFQ09ORklHICYmXG4gICAgICAgICAgIWVyck1lc3NhZ2UgJiZcbiAgICAgICAgICAha3ViZUNsdXN0ZXJBZGRlZCAmJiAoXG4gICAgICAgICAgICA8SW5mb1BhbmVsPlxuICAgICAgICAgICAgICB7c3RyaW5ncy52aWV3Lm1haW4ua3ViZUNvbmZpZ0V2ZW50LmNsdXN0ZXJTa2lwcGVkKFxuICAgICAgICAgICAgICAgIGV2ZW50Q2x1c3Rlck5hbWVcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvSW5mb1BhbmVsPlxuICAgICAgICAgICl9XG5cbiAgICAgICAgey8qXG4gICAgICAgICAgd2hlbiBoYW5kbGluZyB0aGUgRVhUX0VWRU5UX0FDVElWQVRFX0NMVVNURVIgZXZlbnQsIHNob3cgdGhlIHJlc3VsdCBpbiB0aGUgVUkgZXZlbiB0aG91Z2hcbiAgICAgICAgICAgdXNlciB3b24ndCBzZWUgaXQgc2luY2Ugd2UgYWN0aXZhdGUgdGhlIGNsdXN0ZXI7IGp1c3QgaW4gY2FzZSwgYXMgYSBuZXV0cmFsIHN0YXRlXG4gICAgICAgICovfVxuICAgICAgICB7YWN0aXZlRXZlbnRUeXBlID09PSBFWFRfRVZFTlRfQUNUSVZBVEVfQ0xVU1RFUiAmJiAhZXJyTWVzc2FnZSAmJiAoXG4gICAgICAgICAgPEluZm9QYW5lbD5cbiAgICAgICAgICAgIHtzdHJpbmdzLnZpZXcubWFpbi5hY3RpdmF0ZUNsdXN0ZXJFdmVudC5jbHVzdGVyQWN0aXZhdGVkKFxuICAgICAgICAgICAgICBldmVudENsdXN0ZXJOYW1lXG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvSW5mb1BhbmVsPlxuICAgICAgICApfVxuXG4gICAgICAgIHsvKiBDbHVzdGVyTGlzdCBhbmQgQWRkQ2x1c3RlcnMgYXBwbHkgb25seSBpZiBOT1QgbG9hZGluZyBhIGt1YmVDb25maWcgKi99XG4gICAgICAgIHthY3RpdmVFdmVudFR5cGUgIT09IEVYVF9FVkVOVF9LVUJFQ09ORklHICYmXG4gICAgICAgICFlcnJNZXNzYWdlICYmXG4gICAgICAgIGF1dGhBY2Nlc3MuaXNWYWxpZCghYWN0aXZlRXZlbnRUeXBlKSAmJlxuICAgICAgICBjbHVzdGVyc0xvYWRlZCAmJlxuICAgICAgICBzZWxlY3RlZENsdXN0ZXJzID8gKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8Q2x1c3Rlckxpc3RcbiAgICAgICAgICAgICAgY2x1c3RlcnM9e2NsdXN0ZXJzfVxuICAgICAgICAgICAgICBzZWxlY3RlZENsdXN0ZXJzPXtzZWxlY3RlZENsdXN0ZXJzfVxuICAgICAgICAgICAgICBvblNlbGVjdGlvbj17aGFuZGxlQ2x1c3RlclNlbGVjdGlvbn1cbiAgICAgICAgICAgICAgb25TZWxlY3RBbGw9e2hhbmRsZUNsdXN0ZXJTZWxlY3RBbGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEFkZENsdXN0ZXJzXG4gICAgICAgICAgICAgIGNsdXN0ZXJzPXtzZWxlY3RlZENsdXN0ZXJzfVxuICAgICAgICAgICAgICBwYXNzd29yZFJlcXVpcmVkPXthY3RpdmVFdmVudFR5cGUgPT09IEVYVF9FVkVOVF9BRERfQ0xVU1RFUlN9XG4gICAgICAgICAgICAgIG9uQWRkPXtoYW5kbGVDbHVzdGVyc0FkZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICA8L01haW5Db2x1bW4+XG5cbiAgICAgIDxIZWxwQ29sdW1uPlxuICAgICAgICA8SGVscENvbnRlbnRcbiAgICAgICAgICAvLyBUUkFDS0lORzogaHR0cHM6Ly9naXRodWIuY29tL01pcmFudGlzL2xlbnMtZXh0ZW5zaW9uLWNjL2lzc3Vlcy8yNVxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICBfX2h0bWw6IHN0cmluZ3Mudmlldy5oZWxwLmh0bWwoXG4gICAgICAgICAgICAgIHR5cGVvZiBleHRlbnNpb24ub25Qcm90b2NvbFJlcXVlc3QgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICksXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPFByZWZlcmVuY2VzUGFuZWwgLz5cbiAgICAgIDwvSGVscENvbHVtbj5cbiAgICA8L0NvbnRhaW5lcj5cbiAgKTtcbn07XG5cblZpZXcucHJvcFR5cGVzID0ge1xuICBleHRlbnNpb246IHByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbn07XG4iXX0= */");
const HelpColumn = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1nz01xs2"
} : {
  target: "e1nz01xs2",
  label: "HelpColumn"
})(function () {
  return { ...getColumnStyles(),
    justifyContent: 'space-between',
    // push PreferencesPanel to the bottom
    marginRight: 0
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const HelpContent = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1nz01xs1"
} : {
  target: "e1nz01xs1",
  label: "HelpContent"
})(function () {
  return {
    'h2, h3, > p': {
      marginBottom: _styles.layout.gap
    },
    'p:last-child': {
      marginBottom: 0
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const Title = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1nz01xs0"
} : {
  target: "e1nz01xs0",
  label: "Title"
})(function () {
  return {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    h2: {
      marginRight: _styles.layout.gap
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"); //
// MAIN COMPONENT
//

const View = function ({
  extension
}) {
  //
  // STATE
  //
  const {
    state: {
      authAccess,
      prefs: {
        cloudUrl,
        addToNew,
        offline,
        savePath
      }
    },
    actions: extActions
  } = (0, _ExtStateProvider.useExtState)();
  const {
    state: {
      loading: configLoading,
      loaded: configLoaded,
      error: configError,
      config
    },
    actions: configActions
  } = (0, _ConfigProvider.useConfig)();
  const {
    state: {
      loading: authLoading,
      loaded: authLoaded,
      error: authError
    },
    actions: authActions
  } = (0, _AuthProvider.useAuth)();
  const {
    state: {
      loading: clustersLoading,
      loaded: clustersLoaded,
      error: clustersError,
      data: {
        clusters
      }
    },
    actions: clustersActions
  } = (0, _ClustersProvider.useClusters)();
  const {
    state: {
      loading: addClustersLoading,
      error: addClustersError,
      kubeClusterAdded
    },
    actions: clusterActions
  } = (0, _ClusterActionsProvider.useClusterActions)(); // @type {null|Array<Cluster>} null until clusters are loaded, then an array
  //  that represents the current selection, could be empty

  const [selectedClusters, setSelectedClusters] = (0, _react.useState)(null); // @type {string|null} if set, the type of extension event (from the `eventBus`) that
  //  is currently being handled; otherwise, the extension is in its 'normal' state

  const [activeEventType, setActiveEventType] = (0, _react.useState)(null); // name of the cluster being added/skipped/activated via an event; null if not
  //  processing an EXT_EVENT_KUBECONFIG or EXT_EVENT_ACTIVATE_CLUSTER event

  const [eventClusterName, setEventClusterName] = (0, _react.useState)(null); // @type {string} message to show in Loader; null if none

  const [loaderMessage, setLoaderMessage] = (0, _react.useState)(null);
  const loading = configLoading || configLoaded && !configError && !authLoaded && authAccess.hasCredentials() || authLoading || authLoaded && !authError && !clustersLoaded || clustersLoading || addClustersLoading; // @type {string|null} in order of execution/precedence

  const errMessage = configError || authError || clustersError || addClustersError || null; //
  // EVENTS
  //

  const handleLogin = (0, _react.useCallback)(function (info) {
    authAccess.username = info.username;
    authAccess.password = info.password;
    const url = (0, _netUtil.normalizeUrl)(info.cloudUrl);
    authAccess.clearTokens();
    extActions.setCloudUrl(url);
    extActions.setAuthAccess(authAccess);
    authActions.reset();
    clustersActions.reset();
    configActions.load(url); // implicit reset of current config
  }, [authAccess, extActions, authActions, clustersActions, configActions]);
  const handleClusterSelection = (0, _react.useCallback)(function ({
    cluster,
    selected
  }) {
    const idx = selectedClusters.indexOf(cluster);

    if (selected && idx < 0) {
      setSelectedClusters(selectedClusters.concat(cluster));
    } else if (!selected && idx >= 0) {
      const newSelection = selectedClusters.concat();
      newSelection.splice(idx, 1);
      setSelectedClusters(newSelection);
    }
  }, [selectedClusters]);
  const handleClusterSelectAll = (0, _react.useCallback)(function ({
    selected
  }) {
    // shallow-clone by filtering for ready clusters
    setSelectedClusters(selected ? clusters.filter(cl => cl.ready) : []);
  }, [clusters]);
  const handleClustersAdd = (0, _react.useCallback)(function ({
    password
  }) {
    if (!addClustersLoading) {
      clusterActions.addClusters({
        clusters: selectedClusters,
        savePath,
        cloudUrl,
        config,
        username: authAccess.username,
        password: password || authAccess.password,
        offline,
        addToNew
      });
    }
  }, [cloudUrl, authAccess, savePath, addToNew, offline, config, selectedClusters, addClustersLoading, clusterActions]);
  const handleCloseClick = (0, _react.useCallback)(function () {
    // reset View back to login with current auth in case still valid
    setActiveEventType(null);
    setLoaderMessage(null);
    setEventClusterName(null);
    configActions.reset();
    authActions.reset();
    clustersActions.reset();
    setSelectedClusters([]);
    clusterActions.reset();
  }, [configActions, authActions, clustersActions, clusterActions]);
  const handleActivateClusterEvent = (0, _react.useCallback)(function (event) {
    rtv.verify({
      event
    }, {
      event: _eventBus.extEventActivateClusterTs
    });
    const {
      data
    } = event;

    if (!addClustersLoading) {
      setActiveEventType(_eventBus.EXT_EVENT_ACTIVATE_CLUSTER);
      setLoaderMessage(strings.view.main.loaders.activateCluster(`${data.namespace}/${data.clusterName}`));
      setEventClusterName(`${data.namespace}/${data.clusterName}`);
      clusterActions.activateCluster(data);
    }
  }, [addClustersLoading, clusterActions]);
  const handleAddClustersEvent = (0, _react.useCallback)(function (event) {
    rtv.verify({
      event
    }, {
      event: _eventBus.extEventAddClustersTs
    });
    const {
      data
    } = event;
    authAccess.username = data.username;
    authAccess.password = null;
    authAccess.updateTokens(data.tokens);
    const url = (0, _netUtil.normalizeUrl)(data.cloudUrl);
    extActions.setCloudUrl(url);
    extActions.setAuthAccess(authAccess);
    authActions.reset();
    clustersActions.reset();
    setActiveEventType(_eventBus.EXT_EVENT_ADD_CLUSTERS);
    setLoaderMessage(strings.view.main.loaders.addClustersHtml(url));
    configActions.load(url); // implicit reset of current config
  }, [authAccess, authActions, extActions, clustersActions, configActions]);
  const handleKubeconfigEvent = (0, _react.useCallback)(function (event) {
    rtv.verify({
      event
    }, {
      event: _eventBus.extEventKubeconfigTs
    });
    const {
      data
    } = event;

    if (!addClustersLoading) {
      setActiveEventType(_eventBus.EXT_EVENT_KUBECONFIG);
      setLoaderMessage(strings.view.main.loaders.addKubeCluster(`${data.namespace}/${data.clusterName}`));
      setEventClusterName(`${data.namespace}/${data.clusterName}`);
      clusterActions.addKubeCluster({
        savePath,
        addToNew,
        ...data
      });
    }
  }, [savePath, addToNew, addClustersLoading, clusterActions]); //
  // EFFECTS
  //

  (0, _react.useEffect)(function () {
    (0, _eventBus.addExtEventHandler)(_eventBus.EXT_EVENT_ACTIVATE_CLUSTER, handleActivateClusterEvent);
    (0, _eventBus.addExtEventHandler)(_eventBus.EXT_EVENT_ADD_CLUSTERS, handleAddClustersEvent);
    (0, _eventBus.addExtEventHandler)(_eventBus.EXT_EVENT_KUBECONFIG, handleKubeconfigEvent);
    return function () {
      (0, _eventBus.removeExtEventHandler)(_eventBus.EXT_EVENT_ACTIVATE_CLUSTER, handleActivateClusterEvent);
      (0, _eventBus.removeExtEventHandler)(_eventBus.EXT_EVENT_ADD_CLUSTERS, handleAddClustersEvent);
      (0, _eventBus.removeExtEventHandler)(_eventBus.EXT_EVENT_KUBECONFIG, handleKubeconfigEvent);
    };
  }, [handleActivateClusterEvent, handleAddClustersEvent, handleKubeconfigEvent]); // 1. load the config object

  (0, _react.useEffect)(function () {
    if (cloudUrl && authAccess.hasCredentials() && !configLoading && !configLoaded) {
      configActions.load(cloudUrl);
    }
  }, [cloudUrl, authAccess, configLoading, configLoaded, configActions]); // 2. authenticate

  (0, _react.useEffect)(function () {
    if (!configLoading && configLoaded && !configError && !authLoading && !authLoaded) {
      if (authAccess.isValid(!activeEventType)) {
        // skip authentication, go straight for the clusters
        authActions.setAuthenticated();
      } else if (authAccess.hasCredentials()) {
        authActions.authenticate({
          authAccess,
          cloudUrl,
          config
        });
      }
    }
  }, [configLoading, configLoaded, configError, authLoading, authLoaded, authActions, authAccess, cloudUrl, config, activeEventType]); // 3. get clusters

  (0, _react.useEffect)(function () {
    if (!clustersLoading && !clustersLoaded && cloudUrl && config && authLoaded && authAccess.isValid(!activeEventType)) {
      clustersActions.load(cloudUrl, config, authAccess);
    } else if (authAccess.changed) {
      extActions.setAuthAccess(authAccess); // capture any changes after loading clusters
    }
  }, [cloudUrl, authAccess, extActions, config, authLoaded, clustersLoading, clustersLoaded, clustersActions, activeEventType]); // 4. set initial selection after cluster load

  (0, _react.useEffect)(function () {
    if (clustersLoading && selectedClusters) {
      setSelectedClusters(null); // clear selection because we (re-)loading clusters
    } else if (clustersLoaded && !selectedClusters) {
      // set initial selection, skipping management clusters since they typically
      //  are of less importance, as well as clusters that aren't ready yet
      // also, shallow clone the array to disassociate from source
      setSelectedClusters(clusters.filter(cl => cl.ready && !cl.isManagementCluster));
    } else if (clustersLoaded && activeEventType === _eventBus.EXT_EVENT_ADD_CLUSTERS) {
      setLoaderMessage(null); // don't show the loader again when user actually adds the clusters
    }
  }, [clustersLoading, clustersLoaded, clusters, selectedClusters, activeEventType]); //
  // RENDER
  //

  const title = activeEventType === _eventBus.EXT_EVENT_KUBECONFIG ? strings.view.main.titles.kubeConfig() : activeEventType === _eventBus.EXT_EVENT_ACTIVATE_CLUSTER ? strings.view.main.titles.activateCluster() : strings.view.main.titles.generic();
  return (0, _jsxRuntime.jsxs)(Container, {
    className: "lecc-View",
    children: [(0, _jsxRuntime.jsxs)(MainColumn, {
      children: [(0, _jsxRuntime.jsxs)(Title, {
        children: [(0, _jsxRuntime.jsx)("h2", {
          children: title
        }), activeEventType && (0, _jsxRuntime.jsx)(_extensions.Component.Icon, {
          material: "close",
          interactive: true,
          big: true,
          title: strings.view.main.close(),
          onClick: handleCloseClick
        })]
      }), !activeEventType && (0, _jsxRuntime.jsx)(_Login.Login, {
        loading: loading && !addClustersLoading,
        disabled: loading,
        cloudUrl: cloudUrl || undefined,
        username: authAccess ? authAccess.username : undefined,
        password: authAccess ? authAccess.password : undefined,
        onLogin: handleLogin
      }), loading && loaderMessage && (0, _jsxRuntime.jsx)(_Loader.Loader, {
        message: loaderMessage
      }), activeEventType && !!errMessage && (0, _jsxRuntime.jsx)(_ErrorPanel.ErrorPanel, {
        children: errMessage
      }), activeEventType === _eventBus.EXT_EVENT_KUBECONFIG && !errMessage && kubeClusterAdded && (0, _jsxRuntime.jsx)(_InfoPanel.InfoPanel, {
        children: strings.view.main.kubeConfigEvent.clusterAdded(eventClusterName)
      }), activeEventType === _eventBus.EXT_EVENT_KUBECONFIG && !errMessage && !kubeClusterAdded && (0, _jsxRuntime.jsx)(_InfoPanel.InfoPanel, {
        children: strings.view.main.kubeConfigEvent.clusterSkipped(eventClusterName)
      }), activeEventType === _eventBus.EXT_EVENT_ACTIVATE_CLUSTER && !errMessage && (0, _jsxRuntime.jsx)(_InfoPanel.InfoPanel, {
        children: strings.view.main.activateClusterEvent.clusterActivated(eventClusterName)
      }), activeEventType !== _eventBus.EXT_EVENT_KUBECONFIG && !errMessage && authAccess.isValid(!activeEventType) && clustersLoaded && selectedClusters ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_ClusterList.ClusterList, {
          clusters: clusters,
          selectedClusters: selectedClusters,
          onSelection: handleClusterSelection,
          onSelectAll: handleClusterSelectAll
        }), (0, _jsxRuntime.jsx)(_AddClusters.AddClusters, {
          clusters: selectedClusters,
          passwordRequired: activeEventType === _eventBus.EXT_EVENT_ADD_CLUSTERS,
          onAdd: handleClustersAdd
        })]
      }) : undefined]
    }), (0, _jsxRuntime.jsxs)(HelpColumn, {
      children: [(0, _jsxRuntime.jsx)(HelpContent // TRACKING: https://github.com/Mirantis/lens-extension-cc/issues/25
      , {
        dangerouslySetInnerHTML: {
          __html: strings.view.help.html(typeof extension.onProtocolRequest === 'function')
        }
      }), (0, _jsxRuntime.jsx)(_PreferencesPanel.PreferencesPanel, {})]
    })]
  });
};

exports.View = View;
View.propTypes = {
  extension: _propTypes.default.object.isRequired
};