"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreferencesPanel = void 0;

var _base = _interopRequireDefault(require("@emotion/styled/base"));

var _react = require("react");

var _os = _interopRequireDefault(require("os"));

var _electron = require("electron");

var _extensions = require("@k8slens/extensions");

var _ExtStateProvider = require("./store/ExtStateProvider");

var _ClusterActionsProvider = require("./store/ClusterActionsProvider");

var _Section = require("./Section");

var _styles = require("./styles");

var strings = _interopRequireWildcard(require("../strings"));

var _package = _interopRequireDefault(require("../../package.json"));

var _jsxRuntime = require("@emotion/react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// Preferences Panel
//
//
// INTERNAL STYLED COMPONENTS
//
const Section = ( /*#__PURE__*/0, _base.default)(_Section.Section, process.env.NODE_ENV === "production" ? {
  target: "e15zfenr4"
} : {
  target: "e15zfenr4",
  label: "Section"
})(function ({
  offline
}) {
  return {
    small: {
      marginTop: -(_styles.layout.gap - _styles.layout.grid)
    },
    '.lecc-PreferencesPanel--offline-hint': {
      opacity: offline ? 1.0 : 0.5
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYy9QcmVmZXJlbmNlc1BhbmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CZ0IiLCJmaWxlIjoiLi4vLi4vc3JjL2NjL1ByZWZlcmVuY2VzUGFuZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gUHJlZmVyZW5jZXMgUGFuZWxcbi8vXG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGs4c2xlbnMvZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyB1c2VFeHRTdGF0ZSB9IGZyb20gJy4vc3RvcmUvRXh0U3RhdGVQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VDbHVzdGVyQWN0aW9ucyB9IGZyb20gJy4vc3RvcmUvQ2x1c3RlckFjdGlvbnNQcm92aWRlcic7XG5pbXBvcnQgeyBTZWN0aW9uIGFzIEJhc2VTZWN0aW9uIH0gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB7IGxheW91dCB9IGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vc3RyaW5ncyc7XG5pbXBvcnQgcGtnIGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5cbi8vXG4vLyBJTlRFUk5BTCBTVFlMRUQgQ09NUE9ORU5UU1xuLy9cblxuY29uc3QgU2VjdGlvbiA9IHN0eWxlZChCYXNlU2VjdGlvbikoZnVuY3Rpb24gKHsgb2ZmbGluZSB9KSB7XG4gIHJldHVybiB7XG4gICAgc21hbGw6IHtcbiAgICAgIG1hcmdpblRvcDogLShsYXlvdXQuZ2FwIC0gbGF5b3V0LmdyaWQpLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tb2ZmbGluZS1oaW50Jzoge1xuICAgICAgb3BhY2l0eTogb2ZmbGluZSA/IDEuMCA6IDAuNSxcbiAgICB9LFxuICB9O1xufSk7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIH07XG59KTtcblxuY29uc3QgU2F2ZVBhdGggPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG5cbiAgICAnZGl2LklucHV0Jzoge1xuICAgICAgZmxleDogMSxcbiAgICAgIG1hcmdpblJpZ2h0OiBsYXlvdXQucGFkLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tZm9sZGVyLWljb24nOiB7XG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBTYXZlZEluZGljYXRvciA9IHN0eWxlZC5kaXYoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3ZhcigtLWNvbG9yU3VjY2VzcyknLFxuXG4gICAgcDoge1xuICAgICAgbWFyZ2luTGVmdDogbGF5b3V0LmdyaWQsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBWZXJzaW9uID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIC8vIGZvbnRTaXplOiAndmFyKC0tZm9udC1zaXplLXNtYWxsKScsXG4gICAgLy8gY29sb3I6ICd2YXIoLS10ZXh0Q29sb3JTZWNvbmRhcnkpJyxcbiAgfTtcbn0pO1xuXG4vL1xuLy8gTUFJTiBDT01QT05FTlRcbi8vXG5cbmV4cG9ydCBjb25zdCBQcmVmZXJlbmNlc1BhbmVsID0gZnVuY3Rpb24gKCkge1xuICAvL1xuICAvLyBTVEFURVxuICAvL1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZToge1xuICAgICAgcHJlZnM6IHsgc2F2ZVBhdGgsIG9mZmxpbmUsIGFkZFRvTmV3IH0sXG4gICAgfSxcbiAgICBhY3Rpb25zOiBleHRBY3Rpb25zLFxuICB9ID0gdXNlRXh0U3RhdGUoKTtcblxuICBjb25zdCB7XG4gICAgc3RhdGU6IHsgbG9hZGluZzogYWRkaW5nQ2x1c3RlcnMgfSxcbiAgfSA9IHVzZUNsdXN0ZXJBY3Rpb25zKCk7XG5cbiAgY29uc3QgW3Nob3dTYXZlZCwgc2V0U2hvd1NhdmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvL1xuICAvLyBFVkVOVFNcbiAgLy9cblxuICBjb25zdCBoYW5kbGVCcm93c2VDbGljayA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB7IGRpYWxvZywgQnJvd3NlcldpbmRvdyB9ID0gcmVtb3RlO1xuICAgIGNvbnN0IHsgY2FuY2VsZWQsIGZpbGVQYXRocyB9ID0gYXdhaXQgZGlhbG9nLnNob3dPcGVuRGlhbG9nKFxuICAgICAgQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93KCksXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHRQYXRoOiBzYXZlUGF0aCxcbiAgICAgICAgcHJvcGVydGllczogWydvcGVuRGlyZWN0b3J5JywgJ2NyZWF0ZURpcmVjdG9yeScsICdzaG93SGlkZGVuRmlsZXMnXSxcbiAgICAgICAgbWVzc2FnZTogc3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLm1lc3NhZ2UoKSxcbiAgICAgICAgYnV0dG9uTGFiZWw6IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5hY3Rpb24oKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFjYW5jZWxlZCAmJiBmaWxlUGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChmaWxlUGF0aHNbMF0pO1xuICAgICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aENoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGV4dEFjdGlvbnMuc2V0U2F2ZVBhdGgodmFsdWUpO1xuICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aEJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbmV3UGF0aCA9IHNhdmVQYXRoLnJlcGxhY2UoJ34nLCBvcy5ob21lZGlyKCkpO1xuICAgIGlmIChuZXdQYXRoICE9PSBzYXZlUGF0aCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChuZXdQYXRoKTtcbiAgICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQWRkVG9OZXdDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0QWRkVG9OZXcoY2hlY2tlZCk7XG4gICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU9mZmxpbmVDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0T2ZmbGluZShjaGVja2VkKTtcbiAgICBzZXRTaG93U2F2ZWQodHJ1ZSk7XG4gIH07XG5cbiAgLy9cbiAgLy8gRUZGRUNUU1xuICAvL1xuXG4gIHVzZUVmZmVjdChcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2hvd1NhdmVkKSB7XG4gICAgICAgIGxldCB0aW1lcklkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBzZXRTaG93U2F2ZWQoZmFsc2UpO1xuICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aW1lcklkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Nob3dTYXZlZF1cbiAgKTtcblxuICAvL1xuICAvLyBSRU5ERVJcbiAgLy9cblxuICByZXR1cm4gKFxuICAgIDxTZWN0aW9uIGNsYXNzTmFtZT1cImxlY2MtUHJlZmVyZW5jZXNQYW5lbFwiIG9mZmxpbmU9e29mZmxpbmV9PlxuICAgICAgPFRpdGxlPlxuICAgICAgICA8aDI+e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC50aXRsZSgpfTwvaDI+XG4gICAgICAgIHtzaG93U2F2ZWQgJiYgKFxuICAgICAgICAgIDxTYXZlZEluZGljYXRvcj5cbiAgICAgICAgICAgIDxDb21wb25lbnQuSWNvbiBtYXRlcmlhbD1cImNoZWNrX2NpcmNsZVwiIC8+XG4gICAgICAgICAgICA8cD57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLnNhdmVkKCl9PC9wPlxuICAgICAgICAgIDwvU2F2ZWRJbmRpY2F0b3I+XG4gICAgICAgICl9XG4gICAgICA8L1RpdGxlPlxuXG4gICAgICA8U2F2ZVBhdGg+XG4gICAgICAgIDxDb21wb25lbnQuSW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdGhlbWU9XCJyb3VuZC1ibGFja1wiIC8vIGJvcmRlcnMgb24gYWxsIHNpZGVzLCByb3VuZGVkIGNvcm5lcnNcbiAgICAgICAgICB2YWx1ZT17c2F2ZVBhdGh9XG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIHJlYWRPbmx5XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNhdmVQYXRoQ2hhbmdlfVxuICAgICAgICAgIG9uQmx1cj17aGFuZGxlU2F2ZVBhdGhCbHVyfVxuICAgICAgICAvPlxuICAgICAgICA8Q29tcG9uZW50Lkljb25cbiAgICAgICAgICBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWZvbGRlci1pY29uXCJcbiAgICAgICAgICBtYXRlcmlhbD1cImZvbGRlclwiXG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJyb3dzZUNsaWNrfVxuICAgICAgICAgIHRvb2x0aXA9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5pY29uKCl9XG4gICAgICAgIC8+XG4gICAgICA8L1NhdmVQYXRoPlxuICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cImhpbnRcIj57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLnRpcCgpfTwvc21hbGw+XG5cbiAgICAgIDxDb21wb25lbnQuQ2hlY2tib3hcbiAgICAgICAgbGFiZWw9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXthZGRUb05ld31cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUFkZFRvTmV3Q2hhbmdlfVxuICAgICAgLz5cbiAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWFkZFRvTmV3LWhpbnQgaGludFwiPlxuICAgICAgICB7YWRkVG9OZXdcbiAgICAgICAgICA/IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy50aXBPbigpXG4gICAgICAgICAgOiBzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwuYWRkVG9OZXcudGlwT2ZmKCl9XG4gICAgICA8L3NtYWxsPlxuXG4gICAgICA8Q29tcG9uZW50LkNoZWNrYm94XG4gICAgICAgIGxhYmVsPXtzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwub2ZmbGluZS5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXtvZmZsaW5lfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlT2ZmbGluZUNoYW5nZX1cbiAgICAgIC8+XG4gICAgICA8c21hbGwgY2xhc3NOYW1lPVwibGVjYy1QcmVmZXJlbmNlc1BhbmVsLS1vZmZsaW5lLWhpbnQgaGludFwiPlxuICAgICAgICB7c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLm9mZmxpbmUudGlwKCl9XG4gICAgICA8L3NtYWxsPlxuICAgICAgPFZlcnNpb24+XG4gICAgICAgIDxzbWFsbD52e3BrZy52ZXJzaW9ufTwvc21hbGw+XG4gICAgICA8L1ZlcnNpb24+XG4gICAgPC9TZWN0aW9uPlxuICApO1xufTtcbiJdfQ== */");
const Title = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e15zfenr3"
} : {
  target: "e15zfenr3",
  label: "Title"
})(function () {
  return {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center'
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYy9QcmVmZXJlbmNlc1BhbmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdDYyIsImZpbGUiOiIuLi8uLi9zcmMvY2MvUHJlZmVyZW5jZXNQYW5lbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vXG4vLyBQcmVmZXJlbmNlcyBQYW5lbFxuLy9cblxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyByZW1vdGUgfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAazhzbGVucy9leHRlbnNpb25zJztcbmltcG9ydCB7IHVzZUV4dFN0YXRlIH0gZnJvbSAnLi9zdG9yZS9FeHRTdGF0ZVByb3ZpZGVyJztcbmltcG9ydCB7IHVzZUNsdXN0ZXJBY3Rpb25zIH0gZnJvbSAnLi9zdG9yZS9DbHVzdGVyQWN0aW9uc1Byb3ZpZGVyJztcbmltcG9ydCB7IFNlY3Rpb24gYXMgQmFzZVNlY3Rpb24gfSBmcm9tICcuL1NlY3Rpb24nO1xuaW1wb3J0IHsgbGF5b3V0IH0gZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0ICogYXMgc3RyaW5ncyBmcm9tICcuLi9zdHJpbmdzJztcbmltcG9ydCBwa2cgZnJvbSAnLi4vLi4vcGFja2FnZS5qc29uJztcblxuLy9cbi8vIElOVEVSTkFMIFNUWUxFRCBDT01QT05FTlRTXG4vL1xuXG5jb25zdCBTZWN0aW9uID0gc3R5bGVkKEJhc2VTZWN0aW9uKShmdW5jdGlvbiAoeyBvZmZsaW5lIH0pIHtcbiAgcmV0dXJuIHtcbiAgICBzbWFsbDoge1xuICAgICAgbWFyZ2luVG9wOiAtKGxheW91dC5nYXAgLSBsYXlvdXQuZ3JpZCksXG4gICAgfSxcblxuICAgICcubGVjYy1QcmVmZXJlbmNlc1BhbmVsLS1vZmZsaW5lLWhpbnQnOiB7XG4gICAgICBvcGFjaXR5OiBvZmZsaW5lID8gMS4wIDogMC41LFxuICAgIH0sXG4gIH07XG59KTtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfTtcbn0pO1xuXG5jb25zdCBTYXZlUGF0aCA9IHN0eWxlZC5kaXYoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblxuICAgICdkaXYuSW5wdXQnOiB7XG4gICAgICBmbGV4OiAxLFxuICAgICAgbWFyZ2luUmlnaHQ6IGxheW91dC5wYWQsXG4gICAgfSxcblxuICAgICcubGVjYy1QcmVmZXJlbmNlc1BhbmVsLS1mb2xkZXItaWNvbic6IHtcbiAgICAgIGZsZXg6ICdub25lJyxcbiAgICB9LFxuICB9O1xufSk7XG5cbmNvbnN0IFNhdmVkSW5kaWNhdG9yID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGNvbG9yOiAndmFyKC0tY29sb3JTdWNjZXNzKScsXG5cbiAgICBwOiB7XG4gICAgICBtYXJnaW5MZWZ0OiBsYXlvdXQuZ3JpZCxcbiAgICB9LFxuICB9O1xufSk7XG5cbmNvbnN0IFZlcnNpb24gPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gICAgLy8gZm9udFNpemU6ICd2YXIoLS1mb250LXNpemUtc21hbGwpJyxcbiAgICAvLyBjb2xvcjogJ3ZhcigtLXRleHRDb2xvclNlY29uZGFyeSknLFxuICB9O1xufSk7XG5cbi8vXG4vLyBNQUlOIENPTVBPTkVOVFxuLy9cblxuZXhwb3J0IGNvbnN0IFByZWZlcmVuY2VzUGFuZWwgPSBmdW5jdGlvbiAoKSB7XG4gIC8vXG4gIC8vIFNUQVRFXG4gIC8vXG5cbiAgY29uc3Qge1xuICAgIHN0YXRlOiB7XG4gICAgICBwcmVmczogeyBzYXZlUGF0aCwgb2ZmbGluZSwgYWRkVG9OZXcgfSxcbiAgICB9LFxuICAgIGFjdGlvbnM6IGV4dEFjdGlvbnMsXG4gIH0gPSB1c2VFeHRTdGF0ZSgpO1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZTogeyBsb2FkaW5nOiBhZGRpbmdDbHVzdGVycyB9LFxuICB9ID0gdXNlQ2x1c3RlckFjdGlvbnMoKTtcblxuICBjb25zdCBbc2hvd1NhdmVkLCBzZXRTaG93U2F2ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIC8vXG4gIC8vIEVWRU5UU1xuICAvL1xuXG4gIGNvbnN0IGhhbmRsZUJyb3dzZUNsaWNrID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHsgZGlhbG9nLCBCcm93c2VyV2luZG93IH0gPSByZW1vdGU7XG4gICAgY29uc3QgeyBjYW5jZWxlZCwgZmlsZVBhdGhzIH0gPSBhd2FpdCBkaWFsb2cuc2hvd09wZW5EaWFsb2coXG4gICAgICBCcm93c2VyV2luZG93LmdldEZvY3VzZWRXaW5kb3coKSxcbiAgICAgIHtcbiAgICAgICAgZGVmYXVsdFBhdGg6IHNhdmVQYXRoLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbJ29wZW5EaXJlY3RvcnknLCAnY3JlYXRlRGlyZWN0b3J5JywgJ3Nob3dIaWRkZW5GaWxlcyddLFxuICAgICAgICBtZXNzYWdlOiBzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwubG9jYXRpb24ubWVzc2FnZSgpLFxuICAgICAgICBidXR0b25MYWJlbDogc3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLmFjdGlvbigpLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoIWNhbmNlbGVkICYmIGZpbGVQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgICBleHRBY3Rpb25zLnNldFNhdmVQYXRoKGZpbGVQYXRoc1swXSk7XG4gICAgICBzZXRTaG93U2F2ZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVNhdmVQYXRoQ2hhbmdlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aCh2YWx1ZSk7XG4gICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVNhdmVQYXRoQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBuZXdQYXRoID0gc2F2ZVBhdGgucmVwbGFjZSgnficsIG9zLmhvbWVkaXIoKSk7XG4gICAgaWYgKG5ld1BhdGggIT09IHNhdmVQYXRoKSB7XG4gICAgICBleHRBY3Rpb25zLnNldFNhdmVQYXRoKG5ld1BhdGgpO1xuICAgICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVBZGRUb05ld0NoYW5nZSA9IGZ1bmN0aW9uIChjaGVja2VkKSB7XG4gICAgZXh0QWN0aW9ucy5zZXRBZGRUb05ldyhjaGVja2VkKTtcbiAgICBzZXRTaG93U2F2ZWQodHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlT2ZmbGluZUNoYW5nZSA9IGZ1bmN0aW9uIChjaGVja2VkKSB7XG4gICAgZXh0QWN0aW9ucy5zZXRPZmZsaW5lKGNoZWNrZWQpO1xuICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgfTtcblxuICAvL1xuICAvLyBFRkZFQ1RTXG4gIC8vXG5cbiAgdXNlRWZmZWN0KFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzaG93U2F2ZWQpIHtcbiAgICAgICAgbGV0IHRpbWVySWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHNldFNob3dTYXZlZChmYWxzZSk7XG4gICAgICAgIH0sIDMwMDApO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICBbc2hvd1NhdmVkXVxuICApO1xuXG4gIC8vXG4gIC8vIFJFTkRFUlxuICAvL1xuXG4gIHJldHVybiAoXG4gICAgPFNlY3Rpb24gY2xhc3NOYW1lPVwibGVjYy1QcmVmZXJlbmNlc1BhbmVsXCIgb2ZmbGluZT17b2ZmbGluZX0+XG4gICAgICA8VGl0bGU+XG4gICAgICAgIDxoMj57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLnRpdGxlKCl9PC9oMj5cbiAgICAgICAge3Nob3dTYXZlZCAmJiAoXG4gICAgICAgICAgPFNhdmVkSW5kaWNhdG9yPlxuICAgICAgICAgICAgPENvbXBvbmVudC5JY29uIG1hdGVyaWFsPVwiY2hlY2tfY2lyY2xlXCIgLz5cbiAgICAgICAgICAgIDxwPntzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwuc2F2ZWQoKX08L3A+XG4gICAgICAgICAgPC9TYXZlZEluZGljYXRvcj5cbiAgICAgICAgKX1cbiAgICAgIDwvVGl0bGU+XG5cbiAgICAgIDxTYXZlUGF0aD5cbiAgICAgICAgPENvbXBvbmVudC5JbnB1dFxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICB0aGVtZT1cInJvdW5kLWJsYWNrXCIgLy8gYm9yZGVycyBvbiBhbGwgc2lkZXMsIHJvdW5kZWQgY29ybmVyc1xuICAgICAgICAgIHZhbHVlPXtzYXZlUGF0aH1cbiAgICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgICAgcmVhZE9ubHlcbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2F2ZVBhdGhDaGFuZ2V9XG4gICAgICAgICAgb25CbHVyPXtoYW5kbGVTYXZlUGF0aEJsdXJ9XG4gICAgICAgIC8+XG4gICAgICAgIDxDb21wb25lbnQuSWNvblxuICAgICAgICAgIGNsYXNzTmFtZT1cImxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tZm9sZGVyLWljb25cIlxuICAgICAgICAgIG1hdGVyaWFsPVwiZm9sZGVyXCJcbiAgICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgICAgb25DbGljaz17aGFuZGxlQnJvd3NlQ2xpY2t9XG4gICAgICAgICAgdG9vbHRpcD17c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLmljb24oKX1cbiAgICAgICAgLz5cbiAgICAgIDwvU2F2ZVBhdGg+XG4gICAgICA8c21hbGwgY2xhc3NOYW1lPVwiaGludFwiPntzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwubG9jYXRpb24udGlwKCl9PC9zbWFsbD5cblxuICAgICAgPENvbXBvbmVudC5DaGVja2JveFxuICAgICAgICBsYWJlbD17c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmFkZFRvTmV3LmxhYmVsKCl9XG4gICAgICAgIGRpc2FibGVkPXthZGRpbmdDbHVzdGVyc31cbiAgICAgICAgdmFsdWU9e2FkZFRvTmV3fVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQWRkVG9OZXdDaGFuZ2V9XG4gICAgICAvPlxuICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cImxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tYWRkVG9OZXctaGludCBoaW50XCI+XG4gICAgICAgIHthZGRUb05ld1xuICAgICAgICAgID8gc3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmFkZFRvTmV3LnRpcE9uKClcbiAgICAgICAgICA6IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy50aXBPZmYoKX1cbiAgICAgIDwvc21hbGw+XG5cbiAgICAgIDxDb21wb25lbnQuQ2hlY2tib3hcbiAgICAgICAgbGFiZWw9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5vZmZsaW5lLmxhYmVsKCl9XG4gICAgICAgIGRpc2FibGVkPXthZGRpbmdDbHVzdGVyc31cbiAgICAgICAgdmFsdWU9e29mZmxpbmV9XG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVPZmZsaW5lQ2hhbmdlfVxuICAgICAgLz5cbiAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLW9mZmxpbmUtaGludCBoaW50XCI+XG4gICAgICAgIHtzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwub2ZmbGluZS50aXAoKX1cbiAgICAgIDwvc21hbGw+XG4gICAgICA8VmVyc2lvbj5cbiAgICAgICAgPHNtYWxsPnZ7cGtnLnZlcnNpb259PC9zbWFsbD5cbiAgICAgIDwvVmVyc2lvbj5cbiAgICA8L1NlY3Rpb24+XG4gICk7XG59O1xuIl19 */");
const SavePath = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e15zfenr2"
} : {
  target: "e15zfenr2",
  label: "SavePath"
})(function () {
  return {
    display: 'flex',
    alignItems: 'center',
    'div.Input': {
      flex: 1,
      marginRight: _styles.layout.pad
    },
    '.lecc-PreferencesPanel--folder-icon': {
      flex: 'none'
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYy9QcmVmZXJlbmNlc1BhbmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdDaUIiLCJmaWxlIjoiLi4vLi4vc3JjL2NjL1ByZWZlcmVuY2VzUGFuZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gUHJlZmVyZW5jZXMgUGFuZWxcbi8vXG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGs4c2xlbnMvZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyB1c2VFeHRTdGF0ZSB9IGZyb20gJy4vc3RvcmUvRXh0U3RhdGVQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VDbHVzdGVyQWN0aW9ucyB9IGZyb20gJy4vc3RvcmUvQ2x1c3RlckFjdGlvbnNQcm92aWRlcic7XG5pbXBvcnQgeyBTZWN0aW9uIGFzIEJhc2VTZWN0aW9uIH0gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB7IGxheW91dCB9IGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vc3RyaW5ncyc7XG5pbXBvcnQgcGtnIGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5cbi8vXG4vLyBJTlRFUk5BTCBTVFlMRUQgQ09NUE9ORU5UU1xuLy9cblxuY29uc3QgU2VjdGlvbiA9IHN0eWxlZChCYXNlU2VjdGlvbikoZnVuY3Rpb24gKHsgb2ZmbGluZSB9KSB7XG4gIHJldHVybiB7XG4gICAgc21hbGw6IHtcbiAgICAgIG1hcmdpblRvcDogLShsYXlvdXQuZ2FwIC0gbGF5b3V0LmdyaWQpLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tb2ZmbGluZS1oaW50Jzoge1xuICAgICAgb3BhY2l0eTogb2ZmbGluZSA/IDEuMCA6IDAuNSxcbiAgICB9LFxuICB9O1xufSk7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIH07XG59KTtcblxuY29uc3QgU2F2ZVBhdGggPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG5cbiAgICAnZGl2LklucHV0Jzoge1xuICAgICAgZmxleDogMSxcbiAgICAgIG1hcmdpblJpZ2h0OiBsYXlvdXQucGFkLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tZm9sZGVyLWljb24nOiB7XG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBTYXZlZEluZGljYXRvciA9IHN0eWxlZC5kaXYoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3ZhcigtLWNvbG9yU3VjY2VzcyknLFxuXG4gICAgcDoge1xuICAgICAgbWFyZ2luTGVmdDogbGF5b3V0LmdyaWQsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBWZXJzaW9uID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIC8vIGZvbnRTaXplOiAndmFyKC0tZm9udC1zaXplLXNtYWxsKScsXG4gICAgLy8gY29sb3I6ICd2YXIoLS10ZXh0Q29sb3JTZWNvbmRhcnkpJyxcbiAgfTtcbn0pO1xuXG4vL1xuLy8gTUFJTiBDT01QT05FTlRcbi8vXG5cbmV4cG9ydCBjb25zdCBQcmVmZXJlbmNlc1BhbmVsID0gZnVuY3Rpb24gKCkge1xuICAvL1xuICAvLyBTVEFURVxuICAvL1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZToge1xuICAgICAgcHJlZnM6IHsgc2F2ZVBhdGgsIG9mZmxpbmUsIGFkZFRvTmV3IH0sXG4gICAgfSxcbiAgICBhY3Rpb25zOiBleHRBY3Rpb25zLFxuICB9ID0gdXNlRXh0U3RhdGUoKTtcblxuICBjb25zdCB7XG4gICAgc3RhdGU6IHsgbG9hZGluZzogYWRkaW5nQ2x1c3RlcnMgfSxcbiAgfSA9IHVzZUNsdXN0ZXJBY3Rpb25zKCk7XG5cbiAgY29uc3QgW3Nob3dTYXZlZCwgc2V0U2hvd1NhdmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvL1xuICAvLyBFVkVOVFNcbiAgLy9cblxuICBjb25zdCBoYW5kbGVCcm93c2VDbGljayA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB7IGRpYWxvZywgQnJvd3NlcldpbmRvdyB9ID0gcmVtb3RlO1xuICAgIGNvbnN0IHsgY2FuY2VsZWQsIGZpbGVQYXRocyB9ID0gYXdhaXQgZGlhbG9nLnNob3dPcGVuRGlhbG9nKFxuICAgICAgQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93KCksXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHRQYXRoOiBzYXZlUGF0aCxcbiAgICAgICAgcHJvcGVydGllczogWydvcGVuRGlyZWN0b3J5JywgJ2NyZWF0ZURpcmVjdG9yeScsICdzaG93SGlkZGVuRmlsZXMnXSxcbiAgICAgICAgbWVzc2FnZTogc3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLm1lc3NhZ2UoKSxcbiAgICAgICAgYnV0dG9uTGFiZWw6IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5hY3Rpb24oKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFjYW5jZWxlZCAmJiBmaWxlUGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChmaWxlUGF0aHNbMF0pO1xuICAgICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aENoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGV4dEFjdGlvbnMuc2V0U2F2ZVBhdGgodmFsdWUpO1xuICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aEJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbmV3UGF0aCA9IHNhdmVQYXRoLnJlcGxhY2UoJ34nLCBvcy5ob21lZGlyKCkpO1xuICAgIGlmIChuZXdQYXRoICE9PSBzYXZlUGF0aCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChuZXdQYXRoKTtcbiAgICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQWRkVG9OZXdDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0QWRkVG9OZXcoY2hlY2tlZCk7XG4gICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU9mZmxpbmVDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0T2ZmbGluZShjaGVja2VkKTtcbiAgICBzZXRTaG93U2F2ZWQodHJ1ZSk7XG4gIH07XG5cbiAgLy9cbiAgLy8gRUZGRUNUU1xuICAvL1xuXG4gIHVzZUVmZmVjdChcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2hvd1NhdmVkKSB7XG4gICAgICAgIGxldCB0aW1lcklkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBzZXRTaG93U2F2ZWQoZmFsc2UpO1xuICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aW1lcklkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Nob3dTYXZlZF1cbiAgKTtcblxuICAvL1xuICAvLyBSRU5ERVJcbiAgLy9cblxuICByZXR1cm4gKFxuICAgIDxTZWN0aW9uIGNsYXNzTmFtZT1cImxlY2MtUHJlZmVyZW5jZXNQYW5lbFwiIG9mZmxpbmU9e29mZmxpbmV9PlxuICAgICAgPFRpdGxlPlxuICAgICAgICA8aDI+e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC50aXRsZSgpfTwvaDI+XG4gICAgICAgIHtzaG93U2F2ZWQgJiYgKFxuICAgICAgICAgIDxTYXZlZEluZGljYXRvcj5cbiAgICAgICAgICAgIDxDb21wb25lbnQuSWNvbiBtYXRlcmlhbD1cImNoZWNrX2NpcmNsZVwiIC8+XG4gICAgICAgICAgICA8cD57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLnNhdmVkKCl9PC9wPlxuICAgICAgICAgIDwvU2F2ZWRJbmRpY2F0b3I+XG4gICAgICAgICl9XG4gICAgICA8L1RpdGxlPlxuXG4gICAgICA8U2F2ZVBhdGg+XG4gICAgICAgIDxDb21wb25lbnQuSW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdGhlbWU9XCJyb3VuZC1ibGFja1wiIC8vIGJvcmRlcnMgb24gYWxsIHNpZGVzLCByb3VuZGVkIGNvcm5lcnNcbiAgICAgICAgICB2YWx1ZT17c2F2ZVBhdGh9XG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIHJlYWRPbmx5XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNhdmVQYXRoQ2hhbmdlfVxuICAgICAgICAgIG9uQmx1cj17aGFuZGxlU2F2ZVBhdGhCbHVyfVxuICAgICAgICAvPlxuICAgICAgICA8Q29tcG9uZW50Lkljb25cbiAgICAgICAgICBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWZvbGRlci1pY29uXCJcbiAgICAgICAgICBtYXRlcmlhbD1cImZvbGRlclwiXG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJyb3dzZUNsaWNrfVxuICAgICAgICAgIHRvb2x0aXA9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5pY29uKCl9XG4gICAgICAgIC8+XG4gICAgICA8L1NhdmVQYXRoPlxuICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cImhpbnRcIj57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLnRpcCgpfTwvc21hbGw+XG5cbiAgICAgIDxDb21wb25lbnQuQ2hlY2tib3hcbiAgICAgICAgbGFiZWw9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXthZGRUb05ld31cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUFkZFRvTmV3Q2hhbmdlfVxuICAgICAgLz5cbiAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWFkZFRvTmV3LWhpbnQgaGludFwiPlxuICAgICAgICB7YWRkVG9OZXdcbiAgICAgICAgICA/IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy50aXBPbigpXG4gICAgICAgICAgOiBzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwuYWRkVG9OZXcudGlwT2ZmKCl9XG4gICAgICA8L3NtYWxsPlxuXG4gICAgICA8Q29tcG9uZW50LkNoZWNrYm94XG4gICAgICAgIGxhYmVsPXtzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwub2ZmbGluZS5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXtvZmZsaW5lfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlT2ZmbGluZUNoYW5nZX1cbiAgICAgIC8+XG4gICAgICA8c21hbGwgY2xhc3NOYW1lPVwibGVjYy1QcmVmZXJlbmNlc1BhbmVsLS1vZmZsaW5lLWhpbnQgaGludFwiPlxuICAgICAgICB7c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLm9mZmxpbmUudGlwKCl9XG4gICAgICA8L3NtYWxsPlxuICAgICAgPFZlcnNpb24+XG4gICAgICAgIDxzbWFsbD52e3BrZy52ZXJzaW9ufTwvc21hbGw+XG4gICAgICA8L1ZlcnNpb24+XG4gICAgPC9TZWN0aW9uPlxuICApO1xufTtcbiJdfQ== */");
const SavedIndicator = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e15zfenr1"
} : {
  target: "e15zfenr1",
  label: "SavedIndicator"
})(function () {
  return {
    display: 'flex',
    alignItems: 'center',
    color: 'var(--colorSuccess)',
    p: {
      marginLeft: _styles.layout.grid
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYy9QcmVmZXJlbmNlc1BhbmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdEdUIiLCJmaWxlIjoiLi4vLi4vc3JjL2NjL1ByZWZlcmVuY2VzUGFuZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gUHJlZmVyZW5jZXMgUGFuZWxcbi8vXG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGs4c2xlbnMvZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyB1c2VFeHRTdGF0ZSB9IGZyb20gJy4vc3RvcmUvRXh0U3RhdGVQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VDbHVzdGVyQWN0aW9ucyB9IGZyb20gJy4vc3RvcmUvQ2x1c3RlckFjdGlvbnNQcm92aWRlcic7XG5pbXBvcnQgeyBTZWN0aW9uIGFzIEJhc2VTZWN0aW9uIH0gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB7IGxheW91dCB9IGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vc3RyaW5ncyc7XG5pbXBvcnQgcGtnIGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5cbi8vXG4vLyBJTlRFUk5BTCBTVFlMRUQgQ09NUE9ORU5UU1xuLy9cblxuY29uc3QgU2VjdGlvbiA9IHN0eWxlZChCYXNlU2VjdGlvbikoZnVuY3Rpb24gKHsgb2ZmbGluZSB9KSB7XG4gIHJldHVybiB7XG4gICAgc21hbGw6IHtcbiAgICAgIG1hcmdpblRvcDogLShsYXlvdXQuZ2FwIC0gbGF5b3V0LmdyaWQpLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tb2ZmbGluZS1oaW50Jzoge1xuICAgICAgb3BhY2l0eTogb2ZmbGluZSA/IDEuMCA6IDAuNSxcbiAgICB9LFxuICB9O1xufSk7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIH07XG59KTtcblxuY29uc3QgU2F2ZVBhdGggPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG5cbiAgICAnZGl2LklucHV0Jzoge1xuICAgICAgZmxleDogMSxcbiAgICAgIG1hcmdpblJpZ2h0OiBsYXlvdXQucGFkLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tZm9sZGVyLWljb24nOiB7XG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBTYXZlZEluZGljYXRvciA9IHN0eWxlZC5kaXYoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3ZhcigtLWNvbG9yU3VjY2VzcyknLFxuXG4gICAgcDoge1xuICAgICAgbWFyZ2luTGVmdDogbGF5b3V0LmdyaWQsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBWZXJzaW9uID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIC8vIGZvbnRTaXplOiAndmFyKC0tZm9udC1zaXplLXNtYWxsKScsXG4gICAgLy8gY29sb3I6ICd2YXIoLS10ZXh0Q29sb3JTZWNvbmRhcnkpJyxcbiAgfTtcbn0pO1xuXG4vL1xuLy8gTUFJTiBDT01QT05FTlRcbi8vXG5cbmV4cG9ydCBjb25zdCBQcmVmZXJlbmNlc1BhbmVsID0gZnVuY3Rpb24gKCkge1xuICAvL1xuICAvLyBTVEFURVxuICAvL1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZToge1xuICAgICAgcHJlZnM6IHsgc2F2ZVBhdGgsIG9mZmxpbmUsIGFkZFRvTmV3IH0sXG4gICAgfSxcbiAgICBhY3Rpb25zOiBleHRBY3Rpb25zLFxuICB9ID0gdXNlRXh0U3RhdGUoKTtcblxuICBjb25zdCB7XG4gICAgc3RhdGU6IHsgbG9hZGluZzogYWRkaW5nQ2x1c3RlcnMgfSxcbiAgfSA9IHVzZUNsdXN0ZXJBY3Rpb25zKCk7XG5cbiAgY29uc3QgW3Nob3dTYXZlZCwgc2V0U2hvd1NhdmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvL1xuICAvLyBFVkVOVFNcbiAgLy9cblxuICBjb25zdCBoYW5kbGVCcm93c2VDbGljayA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB7IGRpYWxvZywgQnJvd3NlcldpbmRvdyB9ID0gcmVtb3RlO1xuICAgIGNvbnN0IHsgY2FuY2VsZWQsIGZpbGVQYXRocyB9ID0gYXdhaXQgZGlhbG9nLnNob3dPcGVuRGlhbG9nKFxuICAgICAgQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93KCksXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHRQYXRoOiBzYXZlUGF0aCxcbiAgICAgICAgcHJvcGVydGllczogWydvcGVuRGlyZWN0b3J5JywgJ2NyZWF0ZURpcmVjdG9yeScsICdzaG93SGlkZGVuRmlsZXMnXSxcbiAgICAgICAgbWVzc2FnZTogc3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLm1lc3NhZ2UoKSxcbiAgICAgICAgYnV0dG9uTGFiZWw6IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5hY3Rpb24oKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFjYW5jZWxlZCAmJiBmaWxlUGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChmaWxlUGF0aHNbMF0pO1xuICAgICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aENoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGV4dEFjdGlvbnMuc2V0U2F2ZVBhdGgodmFsdWUpO1xuICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aEJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbmV3UGF0aCA9IHNhdmVQYXRoLnJlcGxhY2UoJ34nLCBvcy5ob21lZGlyKCkpO1xuICAgIGlmIChuZXdQYXRoICE9PSBzYXZlUGF0aCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChuZXdQYXRoKTtcbiAgICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQWRkVG9OZXdDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0QWRkVG9OZXcoY2hlY2tlZCk7XG4gICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU9mZmxpbmVDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0T2ZmbGluZShjaGVja2VkKTtcbiAgICBzZXRTaG93U2F2ZWQodHJ1ZSk7XG4gIH07XG5cbiAgLy9cbiAgLy8gRUZGRUNUU1xuICAvL1xuXG4gIHVzZUVmZmVjdChcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2hvd1NhdmVkKSB7XG4gICAgICAgIGxldCB0aW1lcklkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBzZXRTaG93U2F2ZWQoZmFsc2UpO1xuICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aW1lcklkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Nob3dTYXZlZF1cbiAgKTtcblxuICAvL1xuICAvLyBSRU5ERVJcbiAgLy9cblxuICByZXR1cm4gKFxuICAgIDxTZWN0aW9uIGNsYXNzTmFtZT1cImxlY2MtUHJlZmVyZW5jZXNQYW5lbFwiIG9mZmxpbmU9e29mZmxpbmV9PlxuICAgICAgPFRpdGxlPlxuICAgICAgICA8aDI+e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC50aXRsZSgpfTwvaDI+XG4gICAgICAgIHtzaG93U2F2ZWQgJiYgKFxuICAgICAgICAgIDxTYXZlZEluZGljYXRvcj5cbiAgICAgICAgICAgIDxDb21wb25lbnQuSWNvbiBtYXRlcmlhbD1cImNoZWNrX2NpcmNsZVwiIC8+XG4gICAgICAgICAgICA8cD57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLnNhdmVkKCl9PC9wPlxuICAgICAgICAgIDwvU2F2ZWRJbmRpY2F0b3I+XG4gICAgICAgICl9XG4gICAgICA8L1RpdGxlPlxuXG4gICAgICA8U2F2ZVBhdGg+XG4gICAgICAgIDxDb21wb25lbnQuSW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdGhlbWU9XCJyb3VuZC1ibGFja1wiIC8vIGJvcmRlcnMgb24gYWxsIHNpZGVzLCByb3VuZGVkIGNvcm5lcnNcbiAgICAgICAgICB2YWx1ZT17c2F2ZVBhdGh9XG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIHJlYWRPbmx5XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNhdmVQYXRoQ2hhbmdlfVxuICAgICAgICAgIG9uQmx1cj17aGFuZGxlU2F2ZVBhdGhCbHVyfVxuICAgICAgICAvPlxuICAgICAgICA8Q29tcG9uZW50Lkljb25cbiAgICAgICAgICBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWZvbGRlci1pY29uXCJcbiAgICAgICAgICBtYXRlcmlhbD1cImZvbGRlclwiXG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJyb3dzZUNsaWNrfVxuICAgICAgICAgIHRvb2x0aXA9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5pY29uKCl9XG4gICAgICAgIC8+XG4gICAgICA8L1NhdmVQYXRoPlxuICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cImhpbnRcIj57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLnRpcCgpfTwvc21hbGw+XG5cbiAgICAgIDxDb21wb25lbnQuQ2hlY2tib3hcbiAgICAgICAgbGFiZWw9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXthZGRUb05ld31cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUFkZFRvTmV3Q2hhbmdlfVxuICAgICAgLz5cbiAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWFkZFRvTmV3LWhpbnQgaGludFwiPlxuICAgICAgICB7YWRkVG9OZXdcbiAgICAgICAgICA/IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy50aXBPbigpXG4gICAgICAgICAgOiBzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwuYWRkVG9OZXcudGlwT2ZmKCl9XG4gICAgICA8L3NtYWxsPlxuXG4gICAgICA8Q29tcG9uZW50LkNoZWNrYm94XG4gICAgICAgIGxhYmVsPXtzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwub2ZmbGluZS5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXtvZmZsaW5lfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlT2ZmbGluZUNoYW5nZX1cbiAgICAgIC8+XG4gICAgICA8c21hbGwgY2xhc3NOYW1lPVwibGVjYy1QcmVmZXJlbmNlc1BhbmVsLS1vZmZsaW5lLWhpbnQgaGludFwiPlxuICAgICAgICB7c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLm9mZmxpbmUudGlwKCl9XG4gICAgICA8L3NtYWxsPlxuICAgICAgPFZlcnNpb24+XG4gICAgICAgIDxzbWFsbD52e3BrZy52ZXJzaW9ufTwvc21hbGw+XG4gICAgICA8L1ZlcnNpb24+XG4gICAgPC9TZWN0aW9uPlxuICApO1xufTtcbiJdfQ== */");
const Version = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e15zfenr0"
} : {
  target: "e15zfenr0",
  label: "Version"
})(function () {
  return {
    display: 'flex',
    justifyContent: 'flex-end' // fontSize: 'var(--font-size-small)',
    // color: 'var(--textColorSecondary)',

  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYy9QcmVmZXJlbmNlc1BhbmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9FZ0IiLCJmaWxlIjoiLi4vLi4vc3JjL2NjL1ByZWZlcmVuY2VzUGFuZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gUHJlZmVyZW5jZXMgUGFuZWxcbi8vXG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGs4c2xlbnMvZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyB1c2VFeHRTdGF0ZSB9IGZyb20gJy4vc3RvcmUvRXh0U3RhdGVQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VDbHVzdGVyQWN0aW9ucyB9IGZyb20gJy4vc3RvcmUvQ2x1c3RlckFjdGlvbnNQcm92aWRlcic7XG5pbXBvcnQgeyBTZWN0aW9uIGFzIEJhc2VTZWN0aW9uIH0gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB7IGxheW91dCB9IGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vc3RyaW5ncyc7XG5pbXBvcnQgcGtnIGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5cbi8vXG4vLyBJTlRFUk5BTCBTVFlMRUQgQ09NUE9ORU5UU1xuLy9cblxuY29uc3QgU2VjdGlvbiA9IHN0eWxlZChCYXNlU2VjdGlvbikoZnVuY3Rpb24gKHsgb2ZmbGluZSB9KSB7XG4gIHJldHVybiB7XG4gICAgc21hbGw6IHtcbiAgICAgIG1hcmdpblRvcDogLShsYXlvdXQuZ2FwIC0gbGF5b3V0LmdyaWQpLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tb2ZmbGluZS1oaW50Jzoge1xuICAgICAgb3BhY2l0eTogb2ZmbGluZSA/IDEuMCA6IDAuNSxcbiAgICB9LFxuICB9O1xufSk7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIH07XG59KTtcblxuY29uc3QgU2F2ZVBhdGggPSBzdHlsZWQuZGl2KGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG5cbiAgICAnZGl2LklucHV0Jzoge1xuICAgICAgZmxleDogMSxcbiAgICAgIG1hcmdpblJpZ2h0OiBsYXlvdXQucGFkLFxuICAgIH0sXG5cbiAgICAnLmxlY2MtUHJlZmVyZW5jZXNQYW5lbC0tZm9sZGVyLWljb24nOiB7XG4gICAgICBmbGV4OiAnbm9uZScsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBTYXZlZEluZGljYXRvciA9IHN0eWxlZC5kaXYoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3ZhcigtLWNvbG9yU3VjY2VzcyknLFxuXG4gICAgcDoge1xuICAgICAgbWFyZ2luTGVmdDogbGF5b3V0LmdyaWQsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5jb25zdCBWZXJzaW9uID0gc3R5bGVkLmRpdihmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIC8vIGZvbnRTaXplOiAndmFyKC0tZm9udC1zaXplLXNtYWxsKScsXG4gICAgLy8gY29sb3I6ICd2YXIoLS10ZXh0Q29sb3JTZWNvbmRhcnkpJyxcbiAgfTtcbn0pO1xuXG4vL1xuLy8gTUFJTiBDT01QT05FTlRcbi8vXG5cbmV4cG9ydCBjb25zdCBQcmVmZXJlbmNlc1BhbmVsID0gZnVuY3Rpb24gKCkge1xuICAvL1xuICAvLyBTVEFURVxuICAvL1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0ZToge1xuICAgICAgcHJlZnM6IHsgc2F2ZVBhdGgsIG9mZmxpbmUsIGFkZFRvTmV3IH0sXG4gICAgfSxcbiAgICBhY3Rpb25zOiBleHRBY3Rpb25zLFxuICB9ID0gdXNlRXh0U3RhdGUoKTtcblxuICBjb25zdCB7XG4gICAgc3RhdGU6IHsgbG9hZGluZzogYWRkaW5nQ2x1c3RlcnMgfSxcbiAgfSA9IHVzZUNsdXN0ZXJBY3Rpb25zKCk7XG5cbiAgY29uc3QgW3Nob3dTYXZlZCwgc2V0U2hvd1NhdmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvL1xuICAvLyBFVkVOVFNcbiAgLy9cblxuICBjb25zdCBoYW5kbGVCcm93c2VDbGljayA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB7IGRpYWxvZywgQnJvd3NlcldpbmRvdyB9ID0gcmVtb3RlO1xuICAgIGNvbnN0IHsgY2FuY2VsZWQsIGZpbGVQYXRocyB9ID0gYXdhaXQgZGlhbG9nLnNob3dPcGVuRGlhbG9nKFxuICAgICAgQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93KCksXG4gICAgICB7XG4gICAgICAgIGRlZmF1bHRQYXRoOiBzYXZlUGF0aCxcbiAgICAgICAgcHJvcGVydGllczogWydvcGVuRGlyZWN0b3J5JywgJ2NyZWF0ZURpcmVjdG9yeScsICdzaG93SGlkZGVuRmlsZXMnXSxcbiAgICAgICAgbWVzc2FnZTogc3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLm1lc3NhZ2UoKSxcbiAgICAgICAgYnV0dG9uTGFiZWw6IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5hY3Rpb24oKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCFjYW5jZWxlZCAmJiBmaWxlUGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChmaWxlUGF0aHNbMF0pO1xuICAgICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aENoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGV4dEFjdGlvbnMuc2V0U2F2ZVBhdGgodmFsdWUpO1xuICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTYXZlUGF0aEJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbmV3UGF0aCA9IHNhdmVQYXRoLnJlcGxhY2UoJ34nLCBvcy5ob21lZGlyKCkpO1xuICAgIGlmIChuZXdQYXRoICE9PSBzYXZlUGF0aCkge1xuICAgICAgZXh0QWN0aW9ucy5zZXRTYXZlUGF0aChuZXdQYXRoKTtcbiAgICAgIHNldFNob3dTYXZlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQWRkVG9OZXdDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0QWRkVG9OZXcoY2hlY2tlZCk7XG4gICAgc2V0U2hvd1NhdmVkKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU9mZmxpbmVDaGFuZ2UgPSBmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgIGV4dEFjdGlvbnMuc2V0T2ZmbGluZShjaGVja2VkKTtcbiAgICBzZXRTaG93U2F2ZWQodHJ1ZSk7XG4gIH07XG5cbiAgLy9cbiAgLy8gRUZGRUNUU1xuICAvL1xuXG4gIHVzZUVmZmVjdChcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2hvd1NhdmVkKSB7XG4gICAgICAgIGxldCB0aW1lcklkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBzZXRTaG93U2F2ZWQoZmFsc2UpO1xuICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aW1lcklkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Nob3dTYXZlZF1cbiAgKTtcblxuICAvL1xuICAvLyBSRU5ERVJcbiAgLy9cblxuICByZXR1cm4gKFxuICAgIDxTZWN0aW9uIGNsYXNzTmFtZT1cImxlY2MtUHJlZmVyZW5jZXNQYW5lbFwiIG9mZmxpbmU9e29mZmxpbmV9PlxuICAgICAgPFRpdGxlPlxuICAgICAgICA8aDI+e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC50aXRsZSgpfTwvaDI+XG4gICAgICAgIHtzaG93U2F2ZWQgJiYgKFxuICAgICAgICAgIDxTYXZlZEluZGljYXRvcj5cbiAgICAgICAgICAgIDxDb21wb25lbnQuSWNvbiBtYXRlcmlhbD1cImNoZWNrX2NpcmNsZVwiIC8+XG4gICAgICAgICAgICA8cD57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLnNhdmVkKCl9PC9wPlxuICAgICAgICAgIDwvU2F2ZWRJbmRpY2F0b3I+XG4gICAgICAgICl9XG4gICAgICA8L1RpdGxlPlxuXG4gICAgICA8U2F2ZVBhdGg+XG4gICAgICAgIDxDb21wb25lbnQuSW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdGhlbWU9XCJyb3VuZC1ibGFja1wiIC8vIGJvcmRlcnMgb24gYWxsIHNpZGVzLCByb3VuZGVkIGNvcm5lcnNcbiAgICAgICAgICB2YWx1ZT17c2F2ZVBhdGh9XG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIHJlYWRPbmx5XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNhdmVQYXRoQ2hhbmdlfVxuICAgICAgICAgIG9uQmx1cj17aGFuZGxlU2F2ZVBhdGhCbHVyfVxuICAgICAgICAvPlxuICAgICAgICA8Q29tcG9uZW50Lkljb25cbiAgICAgICAgICBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWZvbGRlci1pY29uXCJcbiAgICAgICAgICBtYXRlcmlhbD1cImZvbGRlclwiXG4gICAgICAgICAgZGlzYWJsZWQ9e2FkZGluZ0NsdXN0ZXJzfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJyb3dzZUNsaWNrfVxuICAgICAgICAgIHRvb2x0aXA9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5sb2NhdGlvbi5pY29uKCl9XG4gICAgICAgIC8+XG4gICAgICA8L1NhdmVQYXRoPlxuICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cImhpbnRcIj57c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLmxvY2F0aW9uLnRpcCgpfTwvc21hbGw+XG5cbiAgICAgIDxDb21wb25lbnQuQ2hlY2tib3hcbiAgICAgICAgbGFiZWw9e3N0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXthZGRUb05ld31cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUFkZFRvTmV3Q2hhbmdlfVxuICAgICAgLz5cbiAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJsZWNjLVByZWZlcmVuY2VzUGFuZWwtLWFkZFRvTmV3LWhpbnQgaGludFwiPlxuICAgICAgICB7YWRkVG9OZXdcbiAgICAgICAgICA/IHN0cmluZ3MucHJlZmVyZW5jZXNQYW5lbC5hZGRUb05ldy50aXBPbigpXG4gICAgICAgICAgOiBzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwuYWRkVG9OZXcudGlwT2ZmKCl9XG4gICAgICA8L3NtYWxsPlxuXG4gICAgICA8Q29tcG9uZW50LkNoZWNrYm94XG4gICAgICAgIGxhYmVsPXtzdHJpbmdzLnByZWZlcmVuY2VzUGFuZWwub2ZmbGluZS5sYWJlbCgpfVxuICAgICAgICBkaXNhYmxlZD17YWRkaW5nQ2x1c3RlcnN9XG4gICAgICAgIHZhbHVlPXtvZmZsaW5lfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlT2ZmbGluZUNoYW5nZX1cbiAgICAgIC8+XG4gICAgICA8c21hbGwgY2xhc3NOYW1lPVwibGVjYy1QcmVmZXJlbmNlc1BhbmVsLS1vZmZsaW5lLWhpbnQgaGludFwiPlxuICAgICAgICB7c3RyaW5ncy5wcmVmZXJlbmNlc1BhbmVsLm9mZmxpbmUudGlwKCl9XG4gICAgICA8L3NtYWxsPlxuICAgICAgPFZlcnNpb24+XG4gICAgICAgIDxzbWFsbD52e3BrZy52ZXJzaW9ufTwvc21hbGw+XG4gICAgICA8L1ZlcnNpb24+XG4gICAgPC9TZWN0aW9uPlxuICApO1xufTtcbiJdfQ== */"); //
// MAIN COMPONENT
//

const PreferencesPanel = function () {
  //
  // STATE
  //
  const {
    state: {
      prefs: {
        savePath,
        offline,
        addToNew
      }
    },
    actions: extActions
  } = (0, _ExtStateProvider.useExtState)();
  const {
    state: {
      loading: addingClusters
    }
  } = (0, _ClusterActionsProvider.useClusterActions)();
  const [showSaved, setShowSaved] = (0, _react.useState)(false); //
  // EVENTS
  //

  const handleBrowseClick = async function () {
    const {
      dialog,
      BrowserWindow
    } = _electron.remote;
    const {
      canceled,
      filePaths
    } = await dialog.showOpenDialog(BrowserWindow.getFocusedWindow(), {
      defaultPath: savePath,
      properties: ['openDirectory', 'createDirectory', 'showHiddenFiles'],
      message: strings.preferencesPanel.location.message(),
      buttonLabel: strings.preferencesPanel.location.action()
    });

    if (!canceled && filePaths.length > 0) {
      extActions.setSavePath(filePaths[0]);
      setShowSaved(true);
    }
  };

  const handleSavePathChange = function (value) {
    extActions.setSavePath(value);
    setShowSaved(true);
  };

  const handleSavePathBlur = function () {
    const newPath = savePath.replace('~', _os.default.homedir());

    if (newPath !== savePath) {
      extActions.setSavePath(newPath);
      setShowSaved(true);
    }
  };

  const handleAddToNewChange = function (checked) {
    extActions.setAddToNew(checked);
    setShowSaved(true);
  };

  const handleOfflineChange = function (checked) {
    extActions.setOffline(checked);
    setShowSaved(true);
  }; //
  // EFFECTS
  //


  (0, _react.useEffect)(function () {
    if (showSaved) {
      let timerId = setTimeout(function () {
        timerId = undefined;
        setShowSaved(false);
      }, 3000);
      return function () {
        if (timerId) {
          clearTimeout(timerId);
        }
      };
    }
  }, [showSaved]); //
  // RENDER
  //

  return (0, _jsxRuntime.jsxs)(Section, {
    className: "lecc-PreferencesPanel",
    offline: offline,
    children: [(0, _jsxRuntime.jsxs)(Title, {
      children: [(0, _jsxRuntime.jsx)("h2", {
        children: strings.preferencesPanel.title()
      }), showSaved && (0, _jsxRuntime.jsxs)(SavedIndicator, {
        children: [(0, _jsxRuntime.jsx)(_extensions.Component.Icon, {
          material: "check_circle"
        }), (0, _jsxRuntime.jsx)("p", {
          children: strings.preferencesPanel.saved()
        })]
      })]
    }), (0, _jsxRuntime.jsxs)(SavePath, {
      children: [(0, _jsxRuntime.jsx)(_extensions.Component.Input, {
        type: "text",
        theme: "round-black" // borders on all sides, rounded corners
        ,
        value: savePath,
        disabled: addingClusters,
        readOnly: true,
        onChange: handleSavePathChange,
        onBlur: handleSavePathBlur
      }), (0, _jsxRuntime.jsx)(_extensions.Component.Icon, {
        className: "lecc-PreferencesPanel--folder-icon",
        material: "folder",
        disabled: addingClusters,
        onClick: handleBrowseClick,
        tooltip: strings.preferencesPanel.location.icon()
      })]
    }), (0, _jsxRuntime.jsx)("small", {
      className: "hint",
      children: strings.preferencesPanel.location.tip()
    }), (0, _jsxRuntime.jsx)(_extensions.Component.Checkbox, {
      label: strings.preferencesPanel.addToNew.label(),
      disabled: addingClusters,
      value: addToNew,
      onChange: handleAddToNewChange
    }), (0, _jsxRuntime.jsx)("small", {
      className: "lecc-PreferencesPanel--addToNew-hint hint",
      children: addToNew ? strings.preferencesPanel.addToNew.tipOn() : strings.preferencesPanel.addToNew.tipOff()
    }), (0, _jsxRuntime.jsx)(_extensions.Component.Checkbox, {
      label: strings.preferencesPanel.offline.label(),
      disabled: addingClusters,
      value: offline,
      onChange: handleOfflineChange
    }), (0, _jsxRuntime.jsx)("small", {
      className: "lecc-PreferencesPanel--offline-hint hint",
      children: strings.preferencesPanel.offline.tip()
    }), (0, _jsxRuntime.jsx)(Version, {
      children: (0, _jsxRuntime.jsxs)("small", {
        children: ["v", _package.default.version]
      })
    })]
  });
};

exports.PreferencesPanel = PreferencesPanel;